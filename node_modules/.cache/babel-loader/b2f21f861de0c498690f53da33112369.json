{"ast":null,"code":"\"use strict\"; // Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst qs = require(\"qs\");\n\nconst stream = require(\"stream\");\n\nconst urlTemplate = require(\"url-template\");\n\nconst uuid = require(\"uuid\");\n\nconst isbrowser_1 = require(\"./isbrowser\"); // tslint:disable-next-line no-var-requires\n\n\nconst pkg = require('../../package.json');\n\nfunction isReadableStream(obj) {\n  return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\n\nfunction getMissingParams(params, required) {\n  const missing = new Array();\n  required.forEach(param => {\n    // Is the required param in the params object?\n    if (params[param] === undefined) {\n      missing.push(param);\n    }\n  }); // If there are any required params missing, return their names in array,\n  // otherwise return null\n\n  return missing.length > 0 ? missing : null;\n}\n\nfunction createAPIRequest(parameters, callback) {\n  if (callback) {\n    createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n  } else {\n    return createAPIRequestAsync(parameters);\n  }\n}\n\nexports.createAPIRequest = createAPIRequest;\n\nfunction createAPIRequestAsync(parameters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let params = parameters.params;\n    const options = Object.assign({}, parameters.options); // Create a new params object so it can no longer be modified from outside\n    // code Also support global and per-client params, but allow them to be\n    // overriden per-request\n\n    const topOptions = parameters.context.google ? parameters.context.google._options.params : {};\n    params = Object.assign({}, // New base object\n    topOptions, // Global params\n    parameters.context._options.params, // Per-client params\n    params // API call params\n    );\n    const media = params.media || {};\n    /**\n     * In a previous version of this API, the request body was stuffed in a field\n     * named `resource`.  This caused lots of problems, because it's not uncommon\n     * to have an actual named parameter required which is also named `resource`.\n     * This mean that users would have to use `resource_` in those cases, which\n     * pretty much nobody figures out on their own. The request body is now\n     * documented as being in the `requestBody` property, but we also need to keep\n     * using `resource` for reasons of back-compat. Cases that need to be covered\n     * here:\n     * - user provides just a `resource` with a request body\n     * - user provides both a `resource` and a `resource_`\n     * - user provides just a `requestBody`\n     * - user provides both a `requestBody` and a `resource`\n     */\n\n    const resource = params.requestBody ? params.requestBody : params.resource;\n\n    if (!params.requestBody && params.resource) {\n      delete params.resource;\n    }\n\n    delete params.requestBody;\n    let authClient = params.auth || parameters.context._options.auth || (parameters.context.google ? parameters.context.google._options.auth : null);\n    const defaultMime = typeof media.body === 'string' ? 'text/plain' : 'application/octet-stream';\n    delete params.media;\n    delete params.auth; // Grab headers from user provided options\n\n    const headers = params.headers || {};\n    delete params.headers; // Un-alias parameters that were modified due to conflicts with reserved names\n\n    Object.keys(params).forEach(key => {\n      if (key.slice(-1) === '_') {\n        const newKey = key.slice(0, -1);\n        params[newKey] = params[key];\n        delete params[key];\n      }\n    }); // Check for missing required parameters in the API request\n\n    const missingParams = getMissingParams(params, parameters.requiredParams);\n\n    if (missingParams) {\n      // Some params are missing - stop further operations and inform the\n      // developer which required params are not included in the request\n      throw new Error('Missing required parameters: ' + missingParams.join(', '));\n    } // Parse urls\n\n\n    if (options.url) {\n      options.url = urlTemplate.parse(options.url).expand(params);\n    }\n\n    if (parameters.mediaUrl) {\n      parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n    } // When forming the querystring, override the serializer so that array\n    // values are serialized like this:\n    // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n    // This serializer also encodes spaces in the querystring as `%20`,\n    // whereas the default serializer in gaxios encodes to a `+`.\n\n\n    options.paramsSerializer = params => {\n      return qs.stringify(params, {\n        arrayFormat: 'repeat'\n      });\n    }; // delete path parameters from the params object so they do not end up in\n    // query\n\n\n    parameters.pathParams.forEach(param => {\n      delete params[param];\n    }); // if authClient is actually a string, use it as an API KEY\n\n    if (typeof authClient === 'string') {\n      params.key = params.key || authClient;\n      authClient = undefined;\n    }\n\n    if (parameters.mediaUrl && media.body) {\n      options.url = parameters.mediaUrl;\n\n      if (resource) {\n        // gaxios doesn't support multipart/related uploads, so it has to\n        // be implemented here.\n        params.uploadType = 'multipart';\n        const multipart = [{\n          'Content-Type': 'application/json',\n          body: JSON.stringify(resource)\n        }, {\n          'Content-Type': media.mimeType || resource && resource.mimeType || defaultMime,\n          body: media.body // can be a readable stream or raw string!\n\n        }];\n        const boundary = uuid.v4();\n        const finale = `--${boundary}--`;\n        const rStream = new stream.PassThrough({\n          flush(callback) {\n            this.push('\\r\\n');\n            this.push(finale);\n            callback();\n          }\n\n        });\n        const pStream = new ProgressStream();\n        const isStream = isReadableStream(multipart[1].body);\n        headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n\n        for (const part of multipart) {\n          const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n          rStream.push(preamble);\n\n          if (typeof part.body === 'string') {\n            rStream.push(part.body);\n            rStream.push('\\r\\n');\n          } else {\n            // Gaxios does not natively support onUploadProgress in node.js.\n            // Pipe through the pStream first to read the number of bytes read\n            // for the purpose of tracking progress.\n            pStream.on('progress', bytesRead => {\n              if (options.onUploadProgress) {\n                options.onUploadProgress({\n                  bytesRead\n                });\n              }\n            });\n            part.body.pipe(pStream).pipe(rStream);\n          }\n        }\n\n        if (!isStream) {\n          rStream.push(finale);\n          rStream.push(null);\n        }\n\n        options.data = rStream;\n      } else {\n        params.uploadType = 'media';\n        Object.assign(headers, {\n          'Content-Type': media.mimeType || defaultMime\n        });\n        options.data = media.body;\n      }\n    } else {\n      options.data = resource || undefined;\n    }\n\n    options.headers = headers;\n    options.params = params;\n\n    if (!isbrowser_1.isBrowser()) {\n      options.headers['Accept-Encoding'] = 'gzip';\n      const directives = options.userAgentDirectives || [];\n      directives.push({\n        product: 'google-api-nodejs-client',\n        version: pkg.version,\n        comment: 'gzip'\n      });\n      const userAgent = directives.map(d => {\n        let line = `${d.product}/${d.version}`;\n\n        if (d.comment) {\n          line += ` (${d.comment})`;\n        }\n\n        return line;\n      }).join(' ');\n      options.headers['User-Agent'] = userAgent;\n    } // By default gaxios treats any 2xx as valid, and all non 2xx status\n    // codes as errors.  This is a problem for HTTP 304s when used along\n    // with an eTag.\n\n\n    if (!options.validateStatus) {\n      options.validateStatus = status => {\n        return status >= 200 && status < 300 || status === 304;\n      };\n    } // Combine the GaxiosOptions options passed with this specific\n    // API call witht the global options configured at the API Context\n    // level, or at the global level.\n\n\n    const mergedOptions = Object.assign({}, parameters.context.google ? parameters.context.google._options : {}, parameters.context._options, options);\n    delete mergedOptions.auth; // is overridden by our auth code\n    // Perform the HTTP request.  NOTE: this function used to return a\n    // mikeal/request object. Since the transition to Axios, the method is\n    // now void.  This may be a source of confusion for users upgrading from\n    // version 24.0 -> 25.0 or up.\n\n    if (authClient && typeof authClient === 'object') {\n      return authClient.request(mergedOptions);\n    } else {\n      return new google_auth_library_1.DefaultTransporter().request(mergedOptions);\n    }\n  });\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\n\n\nclass ProgressStream extends stream.Transform {\n  constructor() {\n    super(...arguments);\n    this.bytesRead = 0;\n  } // tslint:disable-next-line: no-any\n\n\n  _transform(chunk, encoding, callback) {\n    this.bytesRead += chunk.length;\n    this.emit('progress', this.bytesRead);\n    this.push(chunk);\n    callback();\n  }\n\n}","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis-common/build/src/apirequest.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","google_auth_library_1","require","qs","stream","urlTemplate","uuid","isbrowser_1","pkg","isReadableStream","obj","Readable","_read","getMissingParams","params","required","missing","Array","forEach","param","undefined","push","length","createAPIRequest","parameters","callback","createAPIRequestAsync","r","options","assign","topOptions","context","google","_options","media","resource","requestBody","authClient","auth","defaultMime","body","headers","keys","key","slice","newKey","missingParams","requiredParams","Error","join","url","parse","expand","mediaUrl","paramsSerializer","stringify","arrayFormat","pathParams","uploadType","multipart","JSON","mimeType","boundary","v4","finale","rStream","PassThrough","flush","pStream","ProgressStream","isStream","part","preamble","on","bytesRead","onUploadProgress","pipe","data","isBrowser","directives","userAgentDirectives","product","version","comment","userAgent","map","d","line","validateStatus","status","mergedOptions","request","DefaultTransporter","Transform","constructor","arguments","_transform","chunk","encoding","emit"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst qs = require(\"qs\");\nconst stream = require(\"stream\");\nconst urlTemplate = require(\"url-template\");\nconst uuid = require(\"uuid\");\nconst isbrowser_1 = require(\"./isbrowser\");\n// tslint:disable-next-line no-var-requires\nconst pkg = require('../../package.json');\nfunction isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n}\nfunction getMissingParams(params, required) {\n    const missing = new Array();\n    required.forEach(param => {\n        // Is the required param in the params object?\n        if (params[param] === undefined) {\n            missing.push(param);\n        }\n    });\n    // If there are any required params missing, return their names in array,\n    // otherwise return null\n    return missing.length > 0 ? missing : null;\n}\nfunction createAPIRequest(parameters, callback) {\n    if (callback) {\n        createAPIRequestAsync(parameters).then(r => callback(null, r), callback);\n    }\n    else {\n        return createAPIRequestAsync(parameters);\n    }\n}\nexports.createAPIRequest = createAPIRequest;\nfunction createAPIRequestAsync(parameters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let params = parameters.params;\n        const options = Object.assign({}, parameters.options);\n        // Create a new params object so it can no longer be modified from outside\n        // code Also support global and per-client params, but allow them to be\n        // overriden per-request\n        const topOptions = parameters.context.google ?\n            parameters.context.google._options.params :\n            {};\n        params = Object.assign({}, // New base object\n        topOptions, // Global params\n        parameters.context._options.params, // Per-client params\n        params // API call params\n        );\n        const media = params.media || {};\n        /**\n         * In a previous version of this API, the request body was stuffed in a field\n         * named `resource`.  This caused lots of problems, because it's not uncommon\n         * to have an actual named parameter required which is also named `resource`.\n         * This mean that users would have to use `resource_` in those cases, which\n         * pretty much nobody figures out on their own. The request body is now\n         * documented as being in the `requestBody` property, but we also need to keep\n         * using `resource` for reasons of back-compat. Cases that need to be covered\n         * here:\n         * - user provides just a `resource` with a request body\n         * - user provides both a `resource` and a `resource_`\n         * - user provides just a `requestBody`\n         * - user provides both a `requestBody` and a `resource`\n         */\n        const resource = params.requestBody ? params.requestBody : params.resource;\n        if (!params.requestBody && params.resource) {\n            delete params.resource;\n        }\n        delete params.requestBody;\n        let authClient = params.auth || parameters.context._options.auth ||\n            (parameters.context.google ? parameters.context.google._options.auth :\n                null);\n        const defaultMime = typeof media.body === 'string' ?\n            'text/plain' :\n            'application/octet-stream';\n        delete params.media;\n        delete params.auth;\n        // Grab headers from user provided options\n        const headers = params.headers || {};\n        delete params.headers;\n        // Un-alias parameters that were modified due to conflicts with reserved names\n        Object.keys(params).forEach(key => {\n            if (key.slice(-1) === '_') {\n                const newKey = key.slice(0, -1);\n                params[newKey] = params[key];\n                delete params[key];\n            }\n        });\n        // Check for missing required parameters in the API request\n        const missingParams = getMissingParams(params, parameters.requiredParams);\n        if (missingParams) {\n            // Some params are missing - stop further operations and inform the\n            // developer which required params are not included in the request\n            throw new Error('Missing required parameters: ' + missingParams.join(', '));\n        }\n        // Parse urls\n        if (options.url) {\n            options.url = urlTemplate.parse(options.url).expand(params);\n        }\n        if (parameters.mediaUrl) {\n            parameters.mediaUrl = urlTemplate.parse(parameters.mediaUrl).expand(params);\n        }\n        // When forming the querystring, override the serializer so that array\n        // values are serialized like this:\n        // myParams: ['one', 'two'] ---> 'myParams=one&myParams=two'\n        // This serializer also encodes spaces in the querystring as `%20`,\n        // whereas the default serializer in gaxios encodes to a `+`.\n        options.paramsSerializer = (params) => {\n            return qs.stringify(params, { arrayFormat: 'repeat' });\n        };\n        // delete path parameters from the params object so they do not end up in\n        // query\n        parameters.pathParams.forEach(param => {\n            delete params[param];\n        });\n        // if authClient is actually a string, use it as an API KEY\n        if (typeof authClient === 'string') {\n            params.key = params.key || authClient;\n            authClient = undefined;\n        }\n        if (parameters.mediaUrl && media.body) {\n            options.url = parameters.mediaUrl;\n            if (resource) {\n                // gaxios doesn't support multipart/related uploads, so it has to\n                // be implemented here.\n                params.uploadType = 'multipart';\n                const multipart = [\n                    { 'Content-Type': 'application/json', body: JSON.stringify(resource) }, {\n                        'Content-Type': media.mimeType || (resource && resource.mimeType) || defaultMime,\n                        body: media.body // can be a readable stream or raw string!\n                    }\n                ];\n                const boundary = uuid.v4();\n                const finale = `--${boundary}--`;\n                const rStream = new stream.PassThrough({\n                    flush(callback) {\n                        this.push('\\r\\n');\n                        this.push(finale);\n                        callback();\n                    }\n                });\n                const pStream = new ProgressStream();\n                const isStream = isReadableStream(multipart[1].body);\n                headers['Content-Type'] = `multipart/related; boundary=${boundary}`;\n                for (const part of multipart) {\n                    const preamble = `--${boundary}\\r\\nContent-Type: ${part['Content-Type']}\\r\\n\\r\\n`;\n                    rStream.push(preamble);\n                    if (typeof part.body === 'string') {\n                        rStream.push(part.body);\n                        rStream.push('\\r\\n');\n                    }\n                    else {\n                        // Gaxios does not natively support onUploadProgress in node.js.\n                        // Pipe through the pStream first to read the number of bytes read\n                        // for the purpose of tracking progress.\n                        pStream.on('progress', bytesRead => {\n                            if (options.onUploadProgress) {\n                                options.onUploadProgress({ bytesRead });\n                            }\n                        });\n                        part.body.pipe(pStream).pipe(rStream);\n                    }\n                }\n                if (!isStream) {\n                    rStream.push(finale);\n                    rStream.push(null);\n                }\n                options.data = rStream;\n            }\n            else {\n                params.uploadType = 'media';\n                Object.assign(headers, { 'Content-Type': media.mimeType || defaultMime });\n                options.data = media.body;\n            }\n        }\n        else {\n            options.data = resource || undefined;\n        }\n        options.headers = headers;\n        options.params = params;\n        if (!isbrowser_1.isBrowser()) {\n            options.headers['Accept-Encoding'] = 'gzip';\n            const directives = options.userAgentDirectives || [];\n            directives.push({\n                product: 'google-api-nodejs-client',\n                version: pkg.version,\n                comment: 'gzip'\n            });\n            const userAgent = directives\n                .map(d => {\n                let line = `${d.product}/${d.version}`;\n                if (d.comment) {\n                    line += ` (${d.comment})`;\n                }\n                return line;\n            })\n                .join(' ');\n            options.headers['User-Agent'] = userAgent;\n        }\n        // By default gaxios treats any 2xx as valid, and all non 2xx status\n        // codes as errors.  This is a problem for HTTP 304s when used along\n        // with an eTag.\n        if (!options.validateStatus) {\n            options.validateStatus = (status) => {\n                return (status >= 200 && status < 300) || status === 304;\n            };\n        }\n        // Combine the GaxiosOptions options passed with this specific\n        // API call witht the global options configured at the API Context\n        // level, or at the global level.\n        const mergedOptions = Object.assign({}, (parameters.context.google ? parameters.context.google._options : {}), parameters.context._options, options);\n        delete mergedOptions.auth; // is overridden by our auth code\n        // Perform the HTTP request.  NOTE: this function used to return a\n        // mikeal/request object. Since the transition to Axios, the method is\n        // now void.  This may be a source of confusion for users upgrading from\n        // version 24.0 -> 25.0 or up.\n        if (authClient && typeof authClient === 'object') {\n            return authClient.request(mergedOptions);\n        }\n        else {\n            return (new google_auth_library_1.DefaultTransporter()).request(mergedOptions);\n        }\n    });\n}\n/**\n * Basic Passthrough Stream that records the number of bytes read\n * every time the cursor is moved.\n */\nclass ProgressStream extends stream.Transform {\n    constructor() {\n        super(...arguments);\n        this.bytesRead = 0;\n    }\n    // tslint:disable-next-line: no-any\n    _transform(chunk, encoding, callback) {\n        this.bytesRead += chunk.length;\n        this.emit('progress', this.bytesRead);\n        this.push(chunk);\n        callback();\n    }\n}\n//# sourceMappingURL=apirequest.js.map"]},"metadata":{},"sourceType":"script"}