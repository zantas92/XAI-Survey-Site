{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sasportal_v1alpha1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar sasportal_v1alpha1;\n\n(function (sasportal_v1alpha1) {\n  /**\n   * SAS Portal API\n   *\n   *\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const sasportal = google.sasportal('v1alpha1');\n   * ```\n   */\n  class Sasportal {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.customers = new Resource$Customers(this.context);\n      this.deployments = new Resource$Deployments(this.context);\n      this.installer = new Resource$Installer(this.context);\n      this.nodes = new Resource$Nodes(this.context);\n      this.policies = new Resource$Policies(this.context);\n    }\n\n  }\n\n  sasportal_v1alpha1.Sasportal = Sasportal;\n\n  class Resource$Customers {\n    constructor(context) {\n      this.context = context;\n      this.deployments = new Resource$Customers$Deployments(this.context);\n      this.devices = new Resource$Customers$Devices(this.context);\n      this.nodes = new Resource$Customers$Nodes(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/customers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers = Resource$Customers;\n\n  class Resource$Customers$Deployments {\n    constructor(context) {\n      this.context = context;\n      this.devices = new Resource$Customers$Deployments$Devices(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Deployments = Resource$Customers$Deployments;\n\n  class Resource$Customers$Deployments$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Deployments$Devices = Resource$Customers$Deployments$Devices;\n\n  class Resource$Customers$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    signDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Devices = Resource$Customers$Devices;\n\n  class Resource$Customers$Nodes {\n    constructor(context) {\n      this.context = context;\n      this.deployments = new Resource$Customers$Nodes$Deployments(this.context);\n      this.devices = new Resource$Customers$Nodes$Devices(this.context);\n      this.nodes = new Resource$Customers$Nodes$Nodes(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Nodes = Resource$Customers$Nodes;\n\n  class Resource$Customers$Nodes$Deployments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Nodes$Deployments = Resource$Customers$Nodes$Deployments;\n\n  class Resource$Customers$Nodes$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Nodes$Devices = Resource$Customers$Nodes$Devices;\n\n  class Resource$Customers$Nodes$Nodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Customers$Nodes$Nodes = Resource$Customers$Nodes$Nodes;\n\n  class Resource$Deployments {\n    constructor(context) {\n      this.context = context;\n      this.devices = new Resource$Deployments$Devices(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Deployments = Resource$Deployments;\n\n  class Resource$Deployments$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    signDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Deployments$Devices = Resource$Deployments$Devices;\n\n  class Resource$Installer {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generateSecret(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/installer:generateSecret').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/installer:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Installer = Resource$Installer;\n\n  class Resource$Nodes {\n    constructor(context) {\n      this.context = context;\n      this.deployments = new Resource$Nodes$Deployments(this.context);\n      this.devices = new Resource$Nodes$Devices(this.context);\n      this.nodes = new Resource$Nodes$Nodes(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes = Resource$Nodes;\n\n  class Resource$Nodes$Deployments {\n    constructor(context) {\n      this.context = context;\n      this.devices = new Resource$Nodes$Deployments$Devices(this.context);\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Deployments = Resource$Nodes$Deployments;\n\n  class Resource$Nodes$Deployments$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Deployments$Devices = Resource$Nodes$Deployments$Devices;\n\n  class Resource$Nodes$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    signDevice(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Devices = Resource$Nodes$Devices;\n\n  class Resource$Nodes$Nodes {\n    constructor(context) {\n      this.context = context;\n      this.deployments = new Resource$Nodes$Nodes$Deployments(this.context);\n      this.devices = new Resource$Nodes$Nodes$Devices(this.context);\n      this.nodes = new Resource$Nodes$Nodes$Nodes(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    move(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Nodes = Resource$Nodes$Nodes;\n\n  class Resource$Nodes$Nodes$Deployments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Nodes$Deployments = Resource$Nodes$Nodes$Deployments;\n\n  class Resource$Nodes$Nodes$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createSigned(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Nodes$Devices = Resource$Nodes$Nodes$Devices;\n\n  class Resource$Nodes$Nodes$Nodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Nodes$Nodes$Nodes = Resource$Nodes$Nodes$Nodes;\n\n  class Resource$Policies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/policies:get').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    set(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/policies:set').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    test(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1alpha1/policies:test').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sasportal_v1alpha1.Resource$Policies = Resource$Policies;\n})(sasportal_v1alpha1 = exports.sasportal_v1alpha1 || (exports.sasportal_v1alpha1 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/sasportal/v1alpha1.js"],"names":["Object","defineProperty","exports","value","sasportal_v1alpha1","googleapis_common_1","require","Sasportal","constructor","options","google","context","_options","customers","Resource$Customers","deployments","Resource$Deployments","installer","Resource$Installer","nodes","Resource$Nodes","policies","Resource$Policies","Resource$Customers$Deployments","devices","Resource$Customers$Devices","Resource$Customers$Nodes","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","patch","Resource$Customers$Deployments$Devices","create","delete","move","createSigned","signDevice","updateSigned","Resource$Customers$Nodes$Deployments","Resource$Customers$Nodes$Devices","Resource$Customers$Nodes$Nodes","Resource$Deployments$Devices","generateSecret","validate","Resource$Nodes$Deployments","Resource$Nodes$Devices","Resource$Nodes$Nodes","Resource$Nodes$Deployments$Devices","Resource$Nodes$Nodes$Deployments","Resource$Nodes$Nodes$Devices","Resource$Nodes$Nodes$Nodes","set","test"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sasportal_v1alpha1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar sasportal_v1alpha1;\n(function (sasportal_v1alpha1) {\n    /**\n     * SAS Portal API\n     *\n     *\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const sasportal = google.sasportal('v1alpha1');\n     * ```\n     */\n    class Sasportal {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.customers = new Resource$Customers(this.context);\n            this.deployments = new Resource$Deployments(this.context);\n            this.installer = new Resource$Installer(this.context);\n            this.nodes = new Resource$Nodes(this.context);\n            this.policies = new Resource$Policies(this.context);\n        }\n    }\n    sasportal_v1alpha1.Sasportal = Sasportal;\n    class Resource$Customers {\n        constructor(context) {\n            this.context = context;\n            this.deployments = new Resource$Customers$Deployments(this.context);\n            this.devices = new Resource$Customers$Devices(this.context);\n            this.nodes = new Resource$Customers$Nodes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/customers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers = Resource$Customers;\n    class Resource$Customers$Deployments {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Customers$Deployments$Devices(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Deployments = Resource$Customers$Deployments;\n    class Resource$Customers$Deployments$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Deployments$Devices = Resource$Customers$Deployments$Devices;\n    class Resource$Customers$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Devices = Resource$Customers$Devices;\n    class Resource$Customers$Nodes {\n        constructor(context) {\n            this.context = context;\n            this.deployments = new Resource$Customers$Nodes$Deployments(this.context);\n            this.devices = new Resource$Customers$Nodes$Devices(this.context);\n            this.nodes = new Resource$Customers$Nodes$Nodes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Nodes = Resource$Customers$Nodes;\n    class Resource$Customers$Nodes$Deployments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Nodes$Deployments = Resource$Customers$Nodes$Deployments;\n    class Resource$Customers$Nodes$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Nodes$Devices = Resource$Customers$Nodes$Devices;\n    class Resource$Customers$Nodes$Nodes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Customers$Nodes$Nodes = Resource$Customers$Nodes$Nodes;\n    class Resource$Deployments {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Deployments$Devices(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Deployments = Resource$Deployments;\n    class Resource$Deployments$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Deployments$Devices = Resource$Deployments$Devices;\n    class Resource$Installer {\n        constructor(context) {\n            this.context = context;\n        }\n        generateSecret(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/installer:generateSecret').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/installer:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Installer = Resource$Installer;\n    class Resource$Nodes {\n        constructor(context) {\n            this.context = context;\n            this.deployments = new Resource$Nodes$Deployments(this.context);\n            this.devices = new Resource$Nodes$Devices(this.context);\n            this.nodes = new Resource$Nodes$Nodes(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes = Resource$Nodes;\n    class Resource$Nodes$Deployments {\n        constructor(context) {\n            this.context = context;\n            this.devices = new Resource$Nodes$Deployments$Devices(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Deployments = Resource$Nodes$Deployments;\n    class Resource$Nodes$Deployments$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Deployments$Devices = Resource$Nodes$Deployments$Devices;\n    class Resource$Nodes$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        signDevice(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:signDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        updateSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:updateSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Devices = Resource$Nodes$Devices;\n    class Resource$Nodes$Nodes {\n        constructor(context) {\n            this.context = context;\n            this.deployments = new Resource$Nodes$Nodes$Deployments(this.context);\n            this.devices = new Resource$Nodes$Nodes$Devices(this.context);\n            this.nodes = new Resource$Nodes$Nodes$Nodes(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        move(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}:move').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Nodes = Resource$Nodes$Nodes;\n    class Resource$Nodes$Nodes$Deployments {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/deployments').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Nodes$Deployments = Resource$Nodes$Nodes$Deployments;\n    class Resource$Nodes$Nodes$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createSigned(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices:createSigned').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Nodes$Devices = Resource$Nodes$Nodes$Devices;\n    class Resource$Nodes$Nodes$Nodes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/{+parent}/nodes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Nodes$Nodes$Nodes = Resource$Nodes$Nodes$Nodes;\n    class Resource$Policies {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/policies:get').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        set(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/policies:set').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        test(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sasportal.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1alpha1/policies:test').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sasportal_v1alpha1.Resource$Policies = Resource$Policies;\n})(sasportal_v1alpha1 = exports.sasportal_v1alpha1 || (exports.sasportal_v1alpha1 = {}));\n"]},"metadata":{},"sourceType":"script"}