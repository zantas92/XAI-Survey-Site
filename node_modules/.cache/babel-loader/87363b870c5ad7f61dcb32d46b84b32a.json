{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n}); // This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\n\nconst base64js = require(\"base64-js\");\n\nconst isbrowser_1 = require(\"../../isbrowser\"); // Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\n\n\nif (isbrowser_1.isBrowser() && typeof TextEncoder === 'undefined') {\n  require('fast-text-encoding');\n}\n\nclass BrowserCrypto {\n  constructor() {\n    if (typeof window === 'undefined' || window.crypto === undefined || window.crypto.subtle === undefined) {\n      throw new Error('SubtleCrypto not found. Make sure it\\'s an https:// website.');\n    }\n  }\n\n  sha256DigestBase64(str) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // SubtleCrypto digest() method is async, so we must make\n      // this method async as well.\n      // To calculate SHA256 digest using SubtleCrypto, we first\n      // need to convert an input string to an ArrayBuffer:\n      const inputBuffer = new TextEncoder().encode(str); // Result is ArrayBuffer as well.\n\n      const outputBuffer = yield window.crypto.subtle.digest('SHA-256', inputBuffer);\n      return base64js.fromByteArray(new Uint8Array(outputBuffer));\n    });\n  }\n\n  randomBytesBase64(count) {\n    const array = new Uint8Array(count);\n    window.crypto.getRandomValues(array);\n    return base64js.fromByteArray(array);\n  }\n\n  verify(pubkey, data, signature) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const algo = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: {\n          name: 'SHA-256'\n        }\n      };\n      const dataArray = new TextEncoder().encode(data); // base64js requires padding, so let's add some '='\n\n      while (signature.length % 4 !== 0) {\n        signature += '=';\n      }\n\n      const signatureArray = base64js.toByteArray(signature);\n      const cryptoKey = yield window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']); // SubtleCrypto's verify method is async so we must make\n      // this method async as well.\n\n      const result = yield window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n      return result;\n    });\n  }\n\n  createSign(algorithm) {\n    throw new Error('createSign is not implemented in BrowserCrypto');\n  }\n\n  decodeBase64StringUtf8(base64) {\n    const uint8array = base64js.toByteArray(base64);\n    const result = new TextDecoder().decode(uint8array);\n    return result;\n  }\n\n  encodeBase64StringUtf8(text) {\n    const uint8array = new TextEncoder().encode(text);\n    const result = base64js.fromByteArray(uint8array);\n    return result;\n  }\n\n}\n\nexports.BrowserCrypto = BrowserCrypto;","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enk√§t/Release/xai-survey-app/node_modules/googleapis-common/node_modules/google-auth-library/build/src/crypto/browser/crypto.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","base64js","require","isbrowser_1","isBrowser","TextEncoder","BrowserCrypto","constructor","window","crypto","undefined","subtle","Error","sha256DigestBase64","str","inputBuffer","encode","outputBuffer","digest","fromByteArray","Uint8Array","randomBytesBase64","count","array","getRandomValues","verify","pubkey","data","signature","algo","name","hash","dataArray","length","signatureArray","toByteArray","cryptoKey","importKey","createSign","algorithm","decodeBase64StringUtf8","base64","uint8array","TextDecoder","decode","encodeBase64StringUtf8","text"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// This file implements crypto functions we need using in-browser\n// SubtleCrypto interface `window.crypto.subtle`.\nconst base64js = require(\"base64-js\");\nconst isbrowser_1 = require(\"../../isbrowser\");\n// Not all browsers support `TextEncoder`. The following `require` will\n// provide a fast UTF8-only replacement for those browsers that don't support\n// text encoding natively.\nif (isbrowser_1.isBrowser() && typeof TextEncoder === 'undefined') {\n    require('fast-text-encoding');\n}\nclass BrowserCrypto {\n    constructor() {\n        if (typeof (window) === 'undefined' || window.crypto === undefined ||\n            window.crypto.subtle === undefined) {\n            throw new Error('SubtleCrypto not found. Make sure it\\'s an https:// website.');\n        }\n    }\n    sha256DigestBase64(str) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // SubtleCrypto digest() method is async, so we must make\n            // this method async as well.\n            // To calculate SHA256 digest using SubtleCrypto, we first\n            // need to convert an input string to an ArrayBuffer:\n            const inputBuffer = new TextEncoder().encode(str);\n            // Result is ArrayBuffer as well.\n            const outputBuffer = yield window.crypto.subtle.digest('SHA-256', inputBuffer);\n            return base64js.fromByteArray(new Uint8Array(outputBuffer));\n        });\n    }\n    randomBytesBase64(count) {\n        const array = new Uint8Array(count);\n        window.crypto.getRandomValues(array);\n        return base64js.fromByteArray(array);\n    }\n    verify(pubkey, data, signature) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const algo = {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: { name: 'SHA-256' },\n            };\n            const dataArray = new TextEncoder().encode(data);\n            // base64js requires padding, so let's add some '='\n            while (signature.length % 4 !== 0) {\n                signature += '=';\n            }\n            const signatureArray = base64js.toByteArray(signature);\n            const cryptoKey = yield window.crypto.subtle.importKey('jwk', pubkey, algo, true, ['verify']);\n            // SubtleCrypto's verify method is async so we must make\n            // this method async as well.\n            const result = yield window.crypto.subtle.verify(algo, cryptoKey, signatureArray, dataArray);\n            return result;\n        });\n    }\n    createSign(algorithm) {\n        throw new Error('createSign is not implemented in BrowserCrypto');\n    }\n    decodeBase64StringUtf8(base64) {\n        const uint8array = base64js.toByteArray(base64);\n        const result = new TextDecoder().decode(uint8array);\n        return result;\n    }\n    encodeBase64StringUtf8(text) {\n        const uint8array = new TextEncoder().encode(text);\n        const result = base64js.fromByteArray(uint8array);\n        return result;\n    }\n}\nexports.BrowserCrypto = BrowserCrypto;\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"script"}