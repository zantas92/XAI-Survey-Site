{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar dlp_v2;\n\n(function (dlp_v2) {\n  /**\n   * Cloud Data Loss Prevention (DLP) API\n   *\n   * Provides methods for detection, risk analysis, and de-identification of\n   * privacy-sensitive fragments in text, images, and Google Cloud Platform\n   * storage repositories.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const dlp = google.dlp('v2');\n   *\n   * @namespace dlp\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Dlp\n   */\n  class Dlp {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.infoTypes = new Resource$Infotypes(this.context);\n      this.organizations = new Resource$Organizations(this.context);\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  dlp_v2.Dlp = Dlp;\n\n  class Resource$Infotypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/infoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Infotypes = Resource$Infotypes;\n\n  class Resource$Organizations {\n    constructor(context) {\n      this.context = context;\n      this.deidentifyTemplates = new Resource$Organizations$Deidentifytemplates(this.context);\n      this.inspectTemplates = new Resource$Organizations$Inspecttemplates(this.context);\n      this.storedInfoTypes = new Resource$Organizations$Storedinfotypes(this.context);\n    }\n\n  }\n\n  dlp_v2.Resource$Organizations = Resource$Organizations;\n\n  class Resource$Organizations$Deidentifytemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/deidentifyTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/deidentifyTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Organizations$Deidentifytemplates = Resource$Organizations$Deidentifytemplates;\n\n  class Resource$Organizations$Inspecttemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/inspectTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/inspectTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Organizations$Inspecttemplates = Resource$Organizations$Inspecttemplates;\n\n  class Resource$Organizations$Storedinfotypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/storedInfoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/storedInfoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Organizations$Storedinfotypes = Resource$Organizations$Storedinfotypes;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.content = new Resource$Projects$Content(this.context);\n      this.deidentifyTemplates = new Resource$Projects$Deidentifytemplates(this.context);\n      this.dlpJobs = new Resource$Projects$Dlpjobs(this.context);\n      this.image = new Resource$Projects$Image(this.context);\n      this.inspectTemplates = new Resource$Projects$Inspecttemplates(this.context);\n      this.jobTriggers = new Resource$Projects$Jobtriggers(this.context);\n      this.storedInfoTypes = new Resource$Projects$Storedinfotypes(this.context);\n    }\n\n  }\n\n  dlp_v2.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Content {\n    constructor(context) {\n      this.context = context;\n    }\n\n    deidentify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/content:deidentify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    inspect(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/content:inspect').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reidentify(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/content:reidentify').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Content = Resource$Projects$Content;\n\n  class Resource$Projects$Deidentifytemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/deidentifyTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/deidentifyTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Deidentifytemplates = Resource$Projects$Deidentifytemplates;\n\n  class Resource$Projects$Dlpjobs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/dlpJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/dlpJobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Dlpjobs = Resource$Projects$Dlpjobs;\n\n  class Resource$Projects$Image {\n    constructor(context) {\n      this.context = context;\n    }\n\n    redact(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/image:redact').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Image = Resource$Projects$Image;\n\n  class Resource$Projects$Inspecttemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/inspectTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/inspectTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Inspecttemplates = Resource$Projects$Inspecttemplates;\n\n  class Resource$Projects$Jobtriggers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    activate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}:activate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/jobTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/jobTriggers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Jobtriggers = Resource$Projects$Jobtriggers;\n\n  class Resource$Projects$Storedinfotypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/storedInfoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+parent}/storedInfoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dlp_v2.Resource$Projects$Storedinfotypes = Resource$Projects$Storedinfotypes;\n})(dlp_v2 = exports.dlp_v2 || (exports.dlp_v2 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/dlp/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","dlp_v2","Dlp","constructor","options","google","context","_options","infoTypes","Resource$Infotypes","organizations","Resource$Organizations","projects","Resource$Projects","list","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","deidentifyTemplates","Resource$Organizations$Deidentifytemplates","inspectTemplates","Resource$Organizations$Inspecttemplates","storedInfoTypes","Resource$Organizations$Storedinfotypes","create","delete","get","patch","content","Resource$Projects$Content","Resource$Projects$Deidentifytemplates","dlpJobs","Resource$Projects$Dlpjobs","image","Resource$Projects$Image","Resource$Projects$Inspecttemplates","jobTriggers","Resource$Projects$Jobtriggers","Resource$Projects$Storedinfotypes","deidentify","inspect","reidentify","cancel","redact","activate"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar dlp_v2;\n(function (dlp_v2) {\n    /**\n     * Cloud Data Loss Prevention (DLP) API\n     *\n     * Provides methods for detection, risk analysis, and de-identification of\n     * privacy-sensitive fragments in text, images, and Google Cloud Platform\n     * storage repositories.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const dlp = google.dlp('v2');\n     *\n     * @namespace dlp\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Dlp\n     */\n    class Dlp {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.infoTypes = new Resource$Infotypes(this.context);\n            this.organizations = new Resource$Organizations(this.context);\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    dlp_v2.Dlp = Dlp;\n    class Resource$Infotypes {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/infoTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Infotypes = Resource$Infotypes;\n    class Resource$Organizations {\n        constructor(context) {\n            this.context = context;\n            this.deidentifyTemplates =\n                new Resource$Organizations$Deidentifytemplates(this.context);\n            this.inspectTemplates =\n                new Resource$Organizations$Inspecttemplates(this.context);\n            this.storedInfoTypes =\n                new Resource$Organizations$Storedinfotypes(this.context);\n        }\n    }\n    dlp_v2.Resource$Organizations = Resource$Organizations;\n    class Resource$Organizations$Deidentifytemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/deidentifyTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/deidentifyTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Organizations$Deidentifytemplates = Resource$Organizations$Deidentifytemplates;\n    class Resource$Organizations$Inspecttemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/inspectTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/inspectTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Organizations$Inspecttemplates = Resource$Organizations$Inspecttemplates;\n    class Resource$Organizations$Storedinfotypes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/storedInfoTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/storedInfoTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Organizations$Storedinfotypes = Resource$Organizations$Storedinfotypes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.content = new Resource$Projects$Content(this.context);\n            this.deidentifyTemplates =\n                new Resource$Projects$Deidentifytemplates(this.context);\n            this.dlpJobs = new Resource$Projects$Dlpjobs(this.context);\n            this.image = new Resource$Projects$Image(this.context);\n            this.inspectTemplates =\n                new Resource$Projects$Inspecttemplates(this.context);\n            this.jobTriggers = new Resource$Projects$Jobtriggers(this.context);\n            this.storedInfoTypes =\n                new Resource$Projects$Storedinfotypes(this.context);\n        }\n    }\n    dlp_v2.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Content {\n        constructor(context) {\n            this.context = context;\n        }\n        deidentify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/content:deidentify')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        inspect(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/content:inspect')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reidentify(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/content:reidentify')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Content = Resource$Projects$Content;\n    class Resource$Projects$Deidentifytemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/deidentifyTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/deidentifyTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Deidentifytemplates = Resource$Projects$Deidentifytemplates;\n    class Resource$Projects$Dlpjobs {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:cancel')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/dlpJobs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/dlpJobs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Dlpjobs = Resource$Projects$Dlpjobs;\n    class Resource$Projects$Image {\n        constructor(context) {\n            this.context = context;\n        }\n        redact(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/image:redact')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Image = Resource$Projects$Image;\n    class Resource$Projects$Inspecttemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/inspectTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/inspectTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Inspecttemplates = Resource$Projects$Inspecttemplates;\n    class Resource$Projects$Jobtriggers {\n        constructor(context) {\n            this.context = context;\n        }\n        activate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:activate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/jobTriggers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/jobTriggers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Jobtriggers = Resource$Projects$Jobtriggers;\n    class Resource$Projects$Storedinfotypes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/storedInfoTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+parent}/storedInfoTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://dlp.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dlp_v2.Resource$Projects$Storedinfotypes = Resource$Projects$Storedinfotypes;\n})(dlp_v2 = exports.dlp_v2 || (exports.dlp_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}