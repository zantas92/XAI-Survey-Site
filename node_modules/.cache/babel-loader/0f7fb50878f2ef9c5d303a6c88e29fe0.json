{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar androidenterprise_v1;\n\n(function (androidenterprise_v1) {\n  /**\n   * Google Play EMM API\n   *\n   * Manages the deployment of apps to Android for Work users.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const androidenterprise = google.androidenterprise('v1');\n   *\n   * @namespace androidenterprise\n   * @type {Function}\n   * @version v1\n   * @variation v1\n   * @param {object=} options Options for Androidenterprise\n   */\n  class Androidenterprise {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.devices = new Resource$Devices(this.context);\n      this.enterprises = new Resource$Enterprises(this.context);\n      this.entitlements = new Resource$Entitlements(this.context);\n      this.grouplicenses = new Resource$Grouplicenses(this.context);\n      this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n      this.installs = new Resource$Installs(this.context);\n      this.managedconfigurationsfordevice = new Resource$Managedconfigurationsfordevice(this.context);\n      this.managedconfigurationsforuser = new Resource$Managedconfigurationsforuser(this.context);\n      this.managedconfigurationssettings = new Resource$Managedconfigurationssettings(this.context);\n      this.permissions = new Resource$Permissions(this.context);\n      this.products = new Resource$Products(this.context);\n      this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n      this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n      this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n      this.users = new Resource$Users(this.context);\n      this.webapps = new Resource$Webapps(this.context);\n    }\n\n  }\n\n  androidenterprise_v1.Androidenterprise = Androidenterprise;\n\n  class Resource$Devices {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setState(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Devices = Resource$Devices;\n\n  class Resource$Enterprises {\n    constructor(context) {\n      this.context = context;\n    }\n\n    acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/acknowledgeNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    enroll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/enroll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['token'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['domain'],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/pullNotificationSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/account').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    unenroll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n\n  class Resource$Entitlements {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n        pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n\n  class Resource$Grouplicenses {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'groupLicenseId'],\n        pathParams: ['enterpriseId', 'groupLicenseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n\n  class Resource$Grouplicenseusers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'groupLicenseId'],\n        pathParams: ['enterpriseId', 'groupLicenseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n\n  class Resource$Installs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n        pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Installs = Resource$Installs;\n\n  class Resource$Managedconfigurationsfordevice {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'deviceId', 'managedConfigurationForDeviceId'],\n        pathParams: ['deviceId', 'enterpriseId', 'managedConfigurationForDeviceId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n\n  class Resource$Managedconfigurationsforuser {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n        pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n\n  class Resource$Managedconfigurationssettings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n\n  class Resource$Permissions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['permissionId'],\n        pathParams: ['permissionId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n\n  class Resource$Products {\n    constructor(context) {\n      this.context = context;\n    }\n\n    approve(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    unapprove(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'productId'],\n        pathParams: ['enterpriseId', 'productId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Products = Resource$Products;\n\n  class Resource$Serviceaccountkeys {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'keyId'],\n        pathParams: ['enterpriseId', 'keyId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n\n  class Resource$Storelayoutclusters {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n        pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n\n  class Resource$Storelayoutpages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'pageId'],\n        pathParams: ['enterpriseId', 'pageId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    generateToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'email'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revokeToken(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'userId'],\n        pathParams: ['enterpriseId', 'userId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Users = Resource$Users;\n\n  class Resource$Webapps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId'],\n        pathParams: ['enterpriseId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['enterpriseId', 'webAppId'],\n        pathParams: ['enterpriseId', 'webAppId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/androidenterprise/v1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","androidenterprise_v1","Androidenterprise","constructor","options","google","context","_options","devices","Resource$Devices","enterprises","Resource$Enterprises","entitlements","Resource$Entitlements","grouplicenses","Resource$Grouplicenses","grouplicenseusers","Resource$Grouplicenseusers","installs","Resource$Installs","managedconfigurationsfordevice","Resource$Managedconfigurationsfordevice","managedconfigurationsforuser","Resource$Managedconfigurationsforuser","managedconfigurationssettings","Resource$Managedconfigurationssettings","permissions","Resource$Permissions","products","Resource$Products","serviceaccountkeys","Resource$Serviceaccountkeys","storelayoutclusters","Resource$Storelayoutclusters","storelayoutpages","Resource$Storelayoutpages","users","Resource$Users","webapps","Resource$Webapps","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","getState","list","patch","setState","update","acknowledgeNotificationSet","completeSignup","createWebToken","enroll","generateSignupUrl","getServiceAccount","getStoreLayout","pullNotificationSet","sendTestPushNotification","setAccount","setStoreLayout","unenroll","delete","approve","generateApprovalUrl","getAppRestrictionsSchema","getPermissions","unapprove","insert","generateAuthenticationToken","generateToken","getAvailableProductSet","revokeDeviceAccess","revokeToken","setAvailableProductSet"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar androidenterprise_v1;\n(function (androidenterprise_v1) {\n    /**\n     * Google Play EMM API\n     *\n     * Manages the deployment of apps to Android for Work users.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const androidenterprise = google.androidenterprise('v1');\n     *\n     * @namespace androidenterprise\n     * @type {Function}\n     * @version v1\n     * @variation v1\n     * @param {object=} options Options for Androidenterprise\n     */\n    class Androidenterprise {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.devices = new Resource$Devices(this.context);\n            this.enterprises = new Resource$Enterprises(this.context);\n            this.entitlements = new Resource$Entitlements(this.context);\n            this.grouplicenses = new Resource$Grouplicenses(this.context);\n            this.grouplicenseusers = new Resource$Grouplicenseusers(this.context);\n            this.installs = new Resource$Installs(this.context);\n            this.managedconfigurationsfordevice =\n                new Resource$Managedconfigurationsfordevice(this.context);\n            this.managedconfigurationsforuser =\n                new Resource$Managedconfigurationsforuser(this.context);\n            this.managedconfigurationssettings =\n                new Resource$Managedconfigurationssettings(this.context);\n            this.permissions = new Resource$Permissions(this.context);\n            this.products = new Resource$Products(this.context);\n            this.serviceaccountkeys = new Resource$Serviceaccountkeys(this.context);\n            this.storelayoutclusters = new Resource$Storelayoutclusters(this.context);\n            this.storelayoutpages = new Resource$Storelayoutpages(this.context);\n            this.users = new Resource$Users(this.context);\n            this.webapps = new Resource$Webapps(this.context);\n        }\n    }\n    androidenterprise_v1.Androidenterprise = Androidenterprise;\n    class Resource$Devices {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setState(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/state')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Devices = Resource$Devices;\n    class Resource$Enterprises {\n        constructor(context) {\n            this.context = context;\n        }\n        acknowledgeNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/acknowledgeNotificationSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        completeSignup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/completeSignup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        createWebToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/createWebToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        enroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/enroll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['token'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateSignupUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/signupUrl')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises/{enterpriseId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/enterprises')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['domain'],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        pullNotificationSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/pullNotificationSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        sendTestPushNotification(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/sendTestPushNotification')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/account')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setStoreLayout(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unenroll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/unenroll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Enterprises = Resource$Enterprises;\n    class Resource$Entitlements {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/entitlements/{entitlementId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'entitlementId'],\n                pathParams: ['enterpriseId', 'entitlementId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Entitlements = Resource$Entitlements;\n    class Resource$Grouplicenses {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenses = Resource$Grouplicenses;\n    class Resource$Grouplicenseusers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/groupLicenses/{groupLicenseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'groupLicenseId'],\n                pathParams: ['enterpriseId', 'groupLicenseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Grouplicenseusers = Resource$Grouplicenseusers;\n    class Resource$Installs {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/installs/{installId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId', 'installId'],\n                pathParams: ['deviceId', 'enterpriseId', 'installId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Installs = Resource$Installs;\n    class Resource$Managedconfigurationsfordevice {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'deviceId'],\n                pathParams: ['deviceId', 'enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/devices/{deviceId}/managedConfigurationsForDevice/{managedConfigurationForDeviceId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: [\n                    'enterpriseId', 'userId', 'deviceId',\n                    'managedConfigurationForDeviceId'\n                ],\n                pathParams: [\n                    'deviceId', 'enterpriseId', 'managedConfigurationForDeviceId',\n                    'userId'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsfordevice = Resource$Managedconfigurationsfordevice;\n    class Resource$Managedconfigurationsforuser {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/managedConfigurationsForUser/{managedConfigurationForUserId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId', 'managedConfigurationForUserId'],\n                pathParams: ['enterpriseId', 'managedConfigurationForUserId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationsforuser = Resource$Managedconfigurationsforuser;\n    class Resource$Managedconfigurationssettings {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/managedConfigurationsSettings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Managedconfigurationssettings = Resource$Managedconfigurationssettings;\n    class Resource$Permissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/androidenterprise/v1/permissions/{permissionId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['permissionId'],\n                pathParams: ['permissionId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Permissions = Resource$Permissions;\n    class Resource$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        approve(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/approve')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateApprovalUrl(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/generateApprovalUrl')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAppRestrictionsSchema(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/appRestrictionsSchema')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/permissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        unapprove(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/products/{productId}/unapprove')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'productId'],\n                pathParams: ['enterpriseId', 'productId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Products = Resource$Products;\n    class Resource$Serviceaccountkeys {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys/{keyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'keyId'],\n                pathParams: ['enterpriseId', 'keyId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/serviceAccountKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Serviceaccountkeys = Resource$Serviceaccountkeys;\n    class Resource$Storelayoutclusters {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}/clusters/{clusterId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId', 'clusterId'],\n                pathParams: ['clusterId', 'enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutclusters = Resource$Storelayoutclusters;\n    class Resource$Storelayoutpages {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/storeLayout/pages/{pageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'pageId'],\n                pathParams: ['enterpriseId', 'pageId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Storelayoutpages = Resource$Storelayoutpages;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateAuthenticationToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/authenticationToken')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generateToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'email'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revokeDeviceAccess(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/deviceAccess')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revokeToken(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/token')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setAvailableProductSet(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}/availableProductSet')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/users/{userId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'userId'],\n                pathParams: ['enterpriseId', 'userId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Users = Resource$Users;\n    class Resource$Webapps {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId'],\n                pathParams: ['enterpriseId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidenterprise/v1/enterprises/{enterpriseId}/webApps/{webAppId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['enterpriseId', 'webAppId'],\n                pathParams: ['enterpriseId', 'webAppId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidenterprise_v1.Resource$Webapps = Resource$Webapps;\n})(androidenterprise_v1 = exports.androidenterprise_v1 || (exports.androidenterprise_v1 = {}));\n//# sourceMappingURL=v1.js.map"]},"metadata":{},"sourceType":"script"}