{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar dfareporting_v3_1;\n\n(function (dfareporting_v3_1) {\n  /**\n   * DCM/DFA Reporting And Trafficking API\n   *\n   * Manages your DoubleClick Campaign Manager ad campaigns and reports.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const dfareporting = google.dfareporting('v3.1');\n   *\n   * @namespace dfareporting\n   * @type {Function}\n   * @version v3.1\n   * @variation v3.1\n   * @param {object=} options Options for Dfareporting\n   */\n  class Dfareporting {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.accountActiveAdSummaries = new Resource$Accountactiveadsummaries(this.context);\n      this.accountPermissionGroups = new Resource$Accountpermissiongroups(this.context);\n      this.accountPermissions = new Resource$Accountpermissions(this.context);\n      this.accounts = new Resource$Accounts(this.context);\n      this.accountUserProfiles = new Resource$Accountuserprofiles(this.context);\n      this.ads = new Resource$Ads(this.context);\n      this.advertiserGroups = new Resource$Advertisergroups(this.context);\n      this.advertiserLandingPages = new Resource$Advertiserlandingpages(this.context);\n      this.advertisers = new Resource$Advertisers(this.context);\n      this.browsers = new Resource$Browsers(this.context);\n      this.campaignCreativeAssociations = new Resource$Campaigncreativeassociations(this.context);\n      this.campaigns = new Resource$Campaigns(this.context);\n      this.changeLogs = new Resource$Changelogs(this.context);\n      this.cities = new Resource$Cities(this.context);\n      this.connectionTypes = new Resource$Connectiontypes(this.context);\n      this.contentCategories = new Resource$Contentcategories(this.context);\n      this.conversions = new Resource$Conversions(this.context);\n      this.countries = new Resource$Countries(this.context);\n      this.creativeAssets = new Resource$Creativeassets(this.context);\n      this.creativeFields = new Resource$Creativefields(this.context);\n      this.creativeFieldValues = new Resource$Creativefieldvalues(this.context);\n      this.creativeGroups = new Resource$Creativegroups(this.context);\n      this.creatives = new Resource$Creatives(this.context);\n      this.dimensionValues = new Resource$Dimensionvalues(this.context);\n      this.directorySiteContacts = new Resource$Directorysitecontacts(this.context);\n      this.directorySites = new Resource$Directorysites(this.context);\n      this.dynamicTargetingKeys = new Resource$Dynamictargetingkeys(this.context);\n      this.eventTags = new Resource$Eventtags(this.context);\n      this.files = new Resource$Files(this.context);\n      this.floodlightActivities = new Resource$Floodlightactivities(this.context);\n      this.floodlightActivityGroups = new Resource$Floodlightactivitygroups(this.context);\n      this.floodlightConfigurations = new Resource$Floodlightconfigurations(this.context);\n      this.inventoryItems = new Resource$Inventoryitems(this.context);\n      this.languages = new Resource$Languages(this.context);\n      this.metros = new Resource$Metros(this.context);\n      this.mobileApps = new Resource$Mobileapps(this.context);\n      this.mobileCarriers = new Resource$Mobilecarriers(this.context);\n      this.operatingSystems = new Resource$Operatingsystems(this.context);\n      this.operatingSystemVersions = new Resource$Operatingsystemversions(this.context);\n      this.orderDocuments = new Resource$Orderdocuments(this.context);\n      this.orders = new Resource$Orders(this.context);\n      this.placementGroups = new Resource$Placementgroups(this.context);\n      this.placements = new Resource$Placements(this.context);\n      this.placementStrategies = new Resource$Placementstrategies(this.context);\n      this.platformTypes = new Resource$Platformtypes(this.context);\n      this.postalCodes = new Resource$Postalcodes(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.regions = new Resource$Regions(this.context);\n      this.remarketingLists = new Resource$Remarketinglists(this.context);\n      this.remarketingListShares = new Resource$Remarketinglistshares(this.context);\n      this.reports = new Resource$Reports(this.context);\n      this.sites = new Resource$Sites(this.context);\n      this.sizes = new Resource$Sizes(this.context);\n      this.subaccounts = new Resource$Subaccounts(this.context);\n      this.targetableRemarketingLists = new Resource$Targetableremarketinglists(this.context);\n      this.targetingTemplates = new Resource$Targetingtemplates(this.context);\n      this.userProfiles = new Resource$Userprofiles(this.context);\n      this.userRolePermissionGroups = new Resource$Userrolepermissiongroups(this.context);\n      this.userRolePermissions = new Resource$Userrolepermissions(this.context);\n      this.userRoles = new Resource$Userroles(this.context);\n      this.videoFormats = new Resource$Videoformats(this.context);\n    }\n\n  }\n\n  dfareporting_v3_1.Dfareporting = Dfareporting;\n\n  class Resource$Accountactiveadsummaries {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'summaryAccountId'],\n        pathParams: ['profileId', 'summaryAccountId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Accountactiveadsummaries = Resource$Accountactiveadsummaries;\n\n  class Resource$Accountpermissiongroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissionGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissionGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Accountpermissiongroups = Resource$Accountpermissiongroups;\n\n  class Resource$Accountpermissions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Accountpermissions = Resource$Accountpermissions;\n\n  class Resource$Accounts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accounts/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Accounts = Resource$Accounts;\n\n  class Resource$Accountuserprofiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Accountuserprofiles = Resource$Accountuserprofiles;\n\n  class Resource$Ads {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Ads = Resource$Ads;\n\n  class Resource$Advertisergroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Advertisergroups = Resource$Advertisergroups;\n\n  class Resource$Advertiserlandingpages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Advertiserlandingpages = Resource$Advertiserlandingpages;\n\n  class Resource$Advertisers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertisers/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/advertisers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Advertisers = Resource$Advertisers;\n\n  class Resource$Browsers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/browsers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Browsers = Resource$Browsers;\n\n  class Resource$Campaigncreativeassociations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'campaignId'],\n        pathParams: ['campaignId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Campaigncreativeassociations = Resource$Campaigncreativeassociations;\n\n  class Resource$Campaigns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/campaigns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Campaigns = Resource$Campaigns;\n\n  class Resource$Changelogs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/changeLogs/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/changeLogs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Changelogs = Resource$Changelogs;\n\n  class Resource$Cities {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/cities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Cities = Resource$Cities;\n\n  class Resource$Connectiontypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/connectionTypes/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/connectionTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Connectiontypes = Resource$Connectiontypes;\n\n  class Resource$Contentcategories {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Contentcategories = Resource$Contentcategories;\n\n  class Resource$Conversions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    batchinsert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/conversions/batchinsert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchupdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/conversions/batchupdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Conversions = Resource$Conversions;\n\n  class Resource$Countries {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/countries/{dartId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/countries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Countries = Resource$Countries;\n\n  class Resource$Creativeassets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/dfareporting/v3.1/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['advertiserId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Creativeassets = Resource$Creativeassets;\n\n  class Resource$Creativefields {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Creativefields = Resource$Creativefields;\n\n  class Resource$Creativefieldvalues {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId', 'id'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'creativeFieldId'],\n        pathParams: ['creativeFieldId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Creativefieldvalues = Resource$Creativefieldvalues;\n\n  class Resource$Creativegroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Creativegroups = Resource$Creativegroups;\n\n  class Resource$Creatives {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creatives/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/creatives').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Creatives = Resource$Creatives;\n\n  class Resource$Dimensionvalues {\n    constructor(context) {\n      this.context = context;\n    }\n\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/dimensionvalues/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Dimensionvalues = Resource$Dimensionvalues;\n\n  class Resource$Directorysitecontacts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/directorySiteContacts/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/directorySiteContacts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Directorysitecontacts = Resource$Directorysitecontacts;\n\n  class Resource$Directorysites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/directorySites/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/directorySites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/directorySites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Directorysites = Resource$Directorysites;\n\n  class Resource$Dynamictargetingkeys {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'objectId', 'name', 'objectType'],\n        pathParams: ['objectId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Dynamictargetingkeys = Resource$Dynamictargetingkeys;\n\n  class Resource$Eventtags {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/eventTags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Eventtags = Resource$Eventtags;\n\n  class Resource$Files {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/reports/{reportId}/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['reportId', 'fileId'],\n        pathParams: ['fileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Files = Resource$Files;\n\n  class Resource$Floodlightactivities {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    generatetag(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/generatetag').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Floodlightactivities = Resource$Floodlightactivities;\n\n  class Resource$Floodlightactivitygroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Floodlightactivitygroups = Resource$Floodlightactivitygroups;\n\n  class Resource$Floodlightconfigurations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Floodlightconfigurations = Resource$Floodlightconfigurations;\n\n  class Resource$Inventoryitems {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/inventoryItems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Inventoryitems = Resource$Inventoryitems;\n\n  class Resource$Languages {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/languages').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Languages = Resource$Languages;\n\n  class Resource$Metros {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/metros').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Metros = Resource$Metros;\n\n  class Resource$Mobileapps {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/mobileApps/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/mobileApps').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Mobileapps = Resource$Mobileapps;\n\n  class Resource$Mobilecarriers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/mobileCarriers/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/mobileCarriers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Mobilecarriers = Resource$Mobilecarriers;\n\n  class Resource$Operatingsystems {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystems/{dartId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'dartId'],\n        pathParams: ['dartId', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystems').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Operatingsystems = Resource$Operatingsystems;\n\n  class Resource$Operatingsystemversions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystemVersions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystemVersions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Operatingsystemversions = Resource$Operatingsystemversions;\n\n  class Resource$Orderdocuments {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orderDocuments').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Orderdocuments = Resource$Orderdocuments;\n\n  class Resource$Orders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orders/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId', 'id'],\n        pathParams: ['id', 'profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orders').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'projectId'],\n        pathParams: ['profileId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Orders = Resource$Orders;\n\n  class Resource$Placementgroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Placementgroups = Resource$Placementgroups;\n\n  class Resource$Placements {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generatetags(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements/generatetags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placements').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Placements = Resource$Placements;\n\n  class Resource$Placementstrategies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Placementstrategies = Resource$Placementstrategies;\n\n  class Resource$Platformtypes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/platformTypes/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/platformTypes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Platformtypes = Resource$Platformtypes;\n\n  class Resource$Postalcodes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/postalCodes/{code}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'code'],\n        pathParams: ['code', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/postalCodes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Postalcodes = Resource$Postalcodes;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Projects = Resource$Projects;\n\n  class Resource$Regions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/regions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Regions = Resource$Regions;\n\n  class Resource$Remarketinglists {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Remarketinglists = Resource$Remarketinglists;\n\n  class Resource$Remarketinglistshares {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares/{remarketingListId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId', 'remarketingListId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'remarketingListId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Remarketinglistshares = Resource$Remarketinglistshares;\n\n  class Resource$Reports {\n    constructor(context) {\n      this.context = context;\n      this.compatibleFields = new Resource$Reports$Compatiblefields(this.context);\n      this.files = new Resource$Reports$Files(this.context);\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    run(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/run').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Reports = Resource$Reports;\n\n  class Resource$Reports$Compatiblefields {\n    constructor(context) {\n      this.context = context;\n    }\n\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/compatiblefields/query').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Reports$Compatiblefields = Resource$Reports$Compatiblefields;\n\n  class Resource$Reports$Files {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/files/{fileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId', 'fileId'],\n        pathParams: ['fileId', 'profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/files').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'reportId'],\n        pathParams: ['profileId', 'reportId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Reports$Files = Resource$Reports$Files;\n\n  class Resource$Sites {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sites/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sites').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Sites = Resource$Sites;\n\n  class Resource$Sizes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sizes/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sizes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/sizes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Sizes = Resource$Sizes;\n\n  class Resource$Subaccounts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Subaccounts = Resource$Subaccounts;\n\n  class Resource$Targetableremarketinglists {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetableRemarketingLists/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetableRemarketingLists').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'advertiserId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Targetableremarketinglists = Resource$Targetableremarketinglists;\n\n  class Resource$Targetingtemplates {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Targetingtemplates = Resource$Targetingtemplates;\n\n  class Resource$Userprofiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Userprofiles = Resource$Userprofiles;\n\n  class Resource$Userrolepermissiongroups {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissionGroups/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissionGroups').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Userrolepermissiongroups = Resource$Userrolepermissiongroups;\n\n  class Resource$Userrolepermissions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissions/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Userrolepermissions = Resource$Userrolepermissions;\n\n  class Resource$Userroles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/userRoles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Userroles = Resource$Userroles;\n\n  class Resource$Videoformats {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/videoFormats/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId', 'id'],\n        pathParams: ['id', 'profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/videoFormats').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['profileId'],\n        pathParams: ['profileId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dfareporting_v3_1.Resource$Videoformats = Resource$Videoformats;\n})(dfareporting_v3_1 = exports.dfareporting_v3_1 || (exports.dfareporting_v3_1 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/dfareporting/v3.1.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","dfareporting_v3_1","Dfareporting","constructor","options","google","context","_options","accountActiveAdSummaries","Resource$Accountactiveadsummaries","accountPermissionGroups","Resource$Accountpermissiongroups","accountPermissions","Resource$Accountpermissions","accounts","Resource$Accounts","accountUserProfiles","Resource$Accountuserprofiles","ads","Resource$Ads","advertiserGroups","Resource$Advertisergroups","advertiserLandingPages","Resource$Advertiserlandingpages","advertisers","Resource$Advertisers","browsers","Resource$Browsers","campaignCreativeAssociations","Resource$Campaigncreativeassociations","campaigns","Resource$Campaigns","changeLogs","Resource$Changelogs","cities","Resource$Cities","connectionTypes","Resource$Connectiontypes","contentCategories","Resource$Contentcategories","conversions","Resource$Conversions","countries","Resource$Countries","creativeAssets","Resource$Creativeassets","creativeFields","Resource$Creativefields","creativeFieldValues","Resource$Creativefieldvalues","creativeGroups","Resource$Creativegroups","creatives","Resource$Creatives","dimensionValues","Resource$Dimensionvalues","directorySiteContacts","Resource$Directorysitecontacts","directorySites","Resource$Directorysites","dynamicTargetingKeys","Resource$Dynamictargetingkeys","eventTags","Resource$Eventtags","files","Resource$Files","floodlightActivities","Resource$Floodlightactivities","floodlightActivityGroups","Resource$Floodlightactivitygroups","floodlightConfigurations","Resource$Floodlightconfigurations","inventoryItems","Resource$Inventoryitems","languages","Resource$Languages","metros","Resource$Metros","mobileApps","Resource$Mobileapps","mobileCarriers","Resource$Mobilecarriers","operatingSystems","Resource$Operatingsystems","operatingSystemVersions","Resource$Operatingsystemversions","orderDocuments","Resource$Orderdocuments","orders","Resource$Orders","placementGroups","Resource$Placementgroups","placements","Resource$Placements","placementStrategies","Resource$Placementstrategies","platformTypes","Resource$Platformtypes","postalCodes","Resource$Postalcodes","projects","Resource$Projects","regions","Resource$Regions","remarketingLists","Resource$Remarketinglists","remarketingListShares","Resource$Remarketinglistshares","reports","Resource$Reports","sites","Resource$Sites","sizes","Resource$Sizes","subaccounts","Resource$Subaccounts","targetableRemarketingLists","Resource$Targetableremarketinglists","targetingTemplates","Resource$Targetingtemplates","userProfiles","Resource$Userprofiles","userRolePermissionGroups","Resource$Userrolepermissiongroups","userRolePermissions","Resource$Userrolepermissions","userRoles","Resource$Userroles","videoFormats","Resource$Videoformats","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","patch","update","insert","delete","batchinsert","batchupdate","mediaUrl","query","generatetag","generatetags","compatibleFields","Resource$Reports$Compatiblefields","Resource$Reports$Files","run"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,mBAAmB,GAAGC,OAAO,CAAC,mBAAD,CAAnC,C,CACA;AACA;AACA;AACA;AACA;;;AACA,IAAIC,iBAAJ;;AACA,CAAC,UAAUA,iBAAV,EAA6B;AAC1B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,QAAMC,YAAN,CAAmB;AACfC,IAAAA,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkB;AACzB,WAAKC,OAAL,GAAe;AAAEC,QAAAA,QAAQ,EAAEH,OAAO,IAAI,EAAvB;AAA2BC,QAAAA;AAA3B,OAAf;AACA,WAAKG,wBAAL,GACI,IAAIC,iCAAJ,CAAsC,KAAKH,OAA3C,CADJ;AAEA,WAAKI,uBAAL,GACI,IAAIC,gCAAJ,CAAqC,KAAKL,OAA1C,CADJ;AAEA,WAAKM,kBAAL,GAA0B,IAAIC,2BAAJ,CAAgC,KAAKP,OAArC,CAA1B;AACA,WAAKQ,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKT,OAA3B,CAAhB;AACA,WAAKU,mBAAL,GAA2B,IAAIC,4BAAJ,CAAiC,KAAKX,OAAtC,CAA3B;AACA,WAAKY,GAAL,GAAW,IAAIC,YAAJ,CAAiB,KAAKb,OAAtB,CAAX;AACA,WAAKc,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAKf,OAAnC,CAAxB;AACA,WAAKgB,sBAAL,GACI,IAAIC,+BAAJ,CAAoC,KAAKjB,OAAzC,CADJ;AAEA,WAAKkB,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKnB,OAA9B,CAAnB;AACA,WAAKoB,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAKrB,OAA3B,CAAhB;AACA,WAAKsB,4BAAL,GACI,IAAIC,qCAAJ,CAA0C,KAAKvB,OAA/C,CADJ;AAEA,WAAKwB,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKzB,OAA5B,CAAjB;AACA,WAAK0B,UAAL,GAAkB,IAAIC,mBAAJ,CAAwB,KAAK3B,OAA7B,CAAlB;AACA,WAAK4B,MAAL,GAAc,IAAIC,eAAJ,CAAoB,KAAK7B,OAAzB,CAAd;AACA,WAAK8B,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAK/B,OAAlC,CAAvB;AACA,WAAKgC,iBAAL,GAAyB,IAAIC,0BAAJ,CAA+B,KAAKjC,OAApC,CAAzB;AACA,WAAKkC,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKnC,OAA9B,CAAnB;AACA,WAAKoC,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKrC,OAA5B,CAAjB;AACA,WAAKsC,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAKvC,OAAjC,CAAtB;AACA,WAAKwC,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAKzC,OAAjC,CAAtB;AACA,WAAK0C,mBAAL,GAA2B,IAAIC,4BAAJ,CAAiC,KAAK3C,OAAtC,CAA3B;AACA,WAAK4C,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAK7C,OAAjC,CAAtB;AACA,WAAK8C,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAK/C,OAA5B,CAAjB;AACA,WAAKgD,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAKjD,OAAlC,CAAvB;AACA,WAAKkD,qBAAL,GACI,IAAIC,8BAAJ,CAAmC,KAAKnD,OAAxC,CADJ;AAEA,WAAKoD,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAKrD,OAAjC,CAAtB;AACA,WAAKsD,oBAAL,GACI,IAAIC,6BAAJ,CAAkC,KAAKvD,OAAvC,CADJ;AAEA,WAAKwD,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKzD,OAA5B,CAAjB;AACA,WAAK0D,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAK3D,OAAxB,CAAb;AACA,WAAK4D,oBAAL,GACI,IAAIC,6BAAJ,CAAkC,KAAK7D,OAAvC,CADJ;AAEA,WAAK8D,wBAAL,GACI,IAAIC,iCAAJ,CAAsC,KAAK/D,OAA3C,CADJ;AAEA,WAAKgE,wBAAL,GACI,IAAIC,iCAAJ,CAAsC,KAAKjE,OAA3C,CADJ;AAEA,WAAKkE,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAKnE,OAAjC,CAAtB;AACA,WAAKoE,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKrE,OAA5B,CAAjB;AACA,WAAKsE,MAAL,GAAc,IAAIC,eAAJ,CAAoB,KAAKvE,OAAzB,CAAd;AACA,WAAKwE,UAAL,GAAkB,IAAIC,mBAAJ,CAAwB,KAAKzE,OAA7B,CAAlB;AACA,WAAK0E,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAK3E,OAAjC,CAAtB;AACA,WAAK4E,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAK7E,OAAnC,CAAxB;AACA,WAAK8E,uBAAL,GACI,IAAIC,gCAAJ,CAAqC,KAAK/E,OAA1C,CADJ;AAEA,WAAKgF,cAAL,GAAsB,IAAIC,uBAAJ,CAA4B,KAAKjF,OAAjC,CAAtB;AACA,WAAKkF,MAAL,GAAc,IAAIC,eAAJ,CAAoB,KAAKnF,OAAzB,CAAd;AACA,WAAKoF,eAAL,GAAuB,IAAIC,wBAAJ,CAA6B,KAAKrF,OAAlC,CAAvB;AACA,WAAKsF,UAAL,GAAkB,IAAIC,mBAAJ,CAAwB,KAAKvF,OAA7B,CAAlB;AACA,WAAKwF,mBAAL,GAA2B,IAAIC,4BAAJ,CAAiC,KAAKzF,OAAtC,CAA3B;AACA,WAAK0F,aAAL,GAAqB,IAAIC,sBAAJ,CAA2B,KAAK3F,OAAhC,CAArB;AACA,WAAK4F,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAK7F,OAA9B,CAAnB;AACA,WAAK8F,QAAL,GAAgB,IAAIC,iBAAJ,CAAsB,KAAK/F,OAA3B,CAAhB;AACA,WAAKgG,OAAL,GAAe,IAAIC,gBAAJ,CAAqB,KAAKjG,OAA1B,CAAf;AACA,WAAKkG,gBAAL,GAAwB,IAAIC,yBAAJ,CAA8B,KAAKnG,OAAnC,CAAxB;AACA,WAAKoG,qBAAL,GACI,IAAIC,8BAAJ,CAAmC,KAAKrG,OAAxC,CADJ;AAEA,WAAKsG,OAAL,GAAe,IAAIC,gBAAJ,CAAqB,KAAKvG,OAA1B,CAAf;AACA,WAAKwG,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAKzG,OAAxB,CAAb;AACA,WAAK0G,KAAL,GAAa,IAAIC,cAAJ,CAAmB,KAAK3G,OAAxB,CAAb;AACA,WAAK4G,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAK7G,OAA9B,CAAnB;AACA,WAAK8G,0BAAL,GACI,IAAIC,mCAAJ,CAAwC,KAAK/G,OAA7C,CADJ;AAEA,WAAKgH,kBAAL,GAA0B,IAAIC,2BAAJ,CAAgC,KAAKjH,OAArC,CAA1B;AACA,WAAKkH,YAAL,GAAoB,IAAIC,qBAAJ,CAA0B,KAAKnH,OAA/B,CAApB;AACA,WAAKoH,wBAAL,GACI,IAAIC,iCAAJ,CAAsC,KAAKrH,OAA3C,CADJ;AAEA,WAAKsH,mBAAL,GAA2B,IAAIC,4BAAJ,CAAiC,KAAKvH,OAAtC,CAA3B;AACA,WAAKwH,SAAL,GAAiB,IAAIC,kBAAJ,CAAuB,KAAKzH,OAA5B,CAAjB;AACA,WAAK0H,YAAL,GAAoB,IAAIC,qBAAJ,CAA0B,KAAK3H,OAA/B,CAApB;AACH;;AA7Ec;;AA+EnBL,EAAAA,iBAAiB,CAACC,YAAlB,GAAiCA,YAAjC;;AACA,QAAMO,iCAAN,CAAwC;AACpCN,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,kBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,kBAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCmC;;AAqCxCvI,EAAAA,iBAAiB,CAACQ,iCAAlB,GAAsDA,iCAAtD;;AACA,QAAME,gCAAN,CAAuC;AACnCR,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEkC;;AAqEvCvI,EAAAA,iBAAiB,CAACU,gCAAlB,GAAqDA,gCAArD;;AACA,QAAME,2BAAN,CAAkC;AAC9BV,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnE6B;;AAqElCvI,EAAAA,iBAAiB,CAACY,2BAAlB,GAAgDA,2BAAhD;;AACA,QAAME,iBAAN,CAAwB;AACpBZ,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnImB;;AAqIxBvI,EAAAA,iBAAiB,CAACc,iBAAlB,GAAsCA,iBAAtC;;AACA,QAAME,4BAAN,CAAmC;AAC/Bd,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnK8B;;AAqKnCvI,EAAAA,iBAAiB,CAACgB,4BAAlB,GAAiDA,4BAAjD;;AACA,QAAME,YAAN,CAAmB;AACfhB,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CAPD;AAQfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CAPD;AAQfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CAPD;AAQfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,iDAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CAPD;AAQfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AA/Jc;;AAiKnBvI,EAAAA,iBAAiB,CAACkB,YAAlB,GAAiCA,YAAjC;;AACA,QAAME,yBAAN,CAAgC;AAC5BlB,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnM2B;;AAqMhCvI,EAAAA,iBAAiB,CAACoB,yBAAlB,GAA8CA,yBAA9C;;AACA,QAAME,+BAAN,CAAsC;AAClCpB,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKiC;;AAqKtCvI,EAAAA,iBAAiB,CAACsB,+BAAlB,GAAoDA,+BAApD;;AACA,QAAME,oBAAN,CAA2B;AACvBtB,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKsB;;AAqK3BvI,EAAAA,iBAAiB,CAACwB,oBAAlB,GAAyCA,oBAAzC;;AACA,QAAME,iBAAN,CAAwB;AACpBxB,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD0I,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCmB;;AAqCxBvI,EAAAA,iBAAiB,CAAC0B,iBAAlB,GAAsCA,iBAAtC;;AACA,QAAME,qCAAN,CAA4C;AACxC1B,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD6I,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,YAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,YAAD,EAAe,WAAf,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,YAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,YAAD,EAAe,WAAf,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEuC;;AAqE5CvI,EAAAA,iBAAiB,CAAC4B,qCAAlB,GAA0DA,qCAA1D;;AACA,QAAME,kBAAN,CAAyB;AACrB5B,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKoB;;AAqKzBvI,EAAAA,iBAAiB,CAAC8B,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,mBAAN,CAA0B;AACtB9B,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEqB;;AAqE1BvI,EAAAA,iBAAiB,CAACgC,mBAAlB,GAAwCA,mBAAxC;;AACA,QAAME,eAAN,CAAsB;AAClBhC,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD0I,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCiB;;AAqCtBvI,EAAAA,iBAAiB,CAACkC,eAAlB,GAAoCA,eAApC;;AACA,QAAME,wBAAN,CAA+B;AAC3BlC,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnE0B;;AAqE/BvI,EAAAA,iBAAiB,CAACoC,wBAAlB,GAA6CA,wBAA7C;;AACA,QAAME,0BAAN,CAAiC;AAC7BpC,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnM4B;;AAqMjCvI,EAAAA,iBAAiB,CAACsC,0BAAlB,GAA+CA,0BAA/C;;AACA,QAAME,oBAAN,CAA2B;AACvBtC,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD+I,IAAAA,WAAW,CAAClB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACvD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDc,IAAAA,WAAW,CAACnB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACvD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEsB;;AAqE3BvI,EAAAA,iBAAiB,CAACwC,oBAAlB,GAAyCA,oBAAzC;;AACA,QAAME,kBAAN,CAAyB;AACrBxC,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,QAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,WAAX,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEoB;;AAqEzBvI,EAAAA,iBAAiB,CAAC0C,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,uBAAN,CAA8B;AAC1B1C,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD6I,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0FADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfiB,QAAAA,QAAQ,EAAE,CAAChB,OAAO,GACd,iGADM,EAELI,OAFK,CAEG,cAFH,EAEmB,IAFnB,CARK;AAWfE,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,cAAd,CAXD;AAYfC,QAAAA,UAAU,EAAE,CAAC,cAAD,EAAiB,WAAjB,CAZG;AAafxI,QAAAA,OAAO,EAAE,KAAKA;AAbC,OAAnB;;AAeA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAtCyB;;AAwC9BvI,EAAAA,iBAAiB,CAAC4C,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,uBAAN,CAA8B;AAC1B5C,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnMyB;;AAqM9BvI,EAAAA,iBAAiB,CAAC8C,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,4BAAN,CAAmC;AAC/B9C,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,EAAiC,IAAjC,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,IAApB,EAA0B,WAA1B,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,EAAiC,IAAjC,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,IAApB,EAA0B,WAA1B,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,EAAiC,IAAjC,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kGADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,iBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,iBAAD,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnM8B;;AAqMnCvI,EAAAA,iBAAiB,CAACgD,4BAAlB,GAAiDA,4BAAjD;;AACA,QAAME,uBAAN,CAA8B;AAC1BhD,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKyB;;AAqK9BvI,EAAAA,iBAAiB,CAACkD,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,kBAAN,CAAyB;AACrBlD,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKoB;;AAqKzBvI,EAAAA,iBAAiB,CAACoD,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,wBAAN,CAA+B;AAC3BpD,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDkJ,IAAAA,KAAK,CAACrB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnC0B;;AAqC/BvI,EAAAA,iBAAiB,CAACsD,wBAAlB,GAA6CA,wBAA7C;;AACA,QAAME,8BAAN,CAAqC;AACjCtD,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEgC;;AAqErCvI,EAAAA,iBAAiB,CAACwD,8BAAlB,GAAmDA,8BAAnD;;AACA,QAAME,uBAAN,CAA8B;AAC1BxD,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnGyB;;AAqG9BvI,EAAAA,iBAAiB,CAAC0D,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,6BAAN,CAAoC;AAChC1D,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,YAAlC,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,UAAD,EAAa,WAAb,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnG+B;;AAqGpCvI,EAAAA,iBAAiB,CAAC4D,6BAAlB,GAAkDA,6BAAlD;;AACA,QAAME,kBAAN,CAAyB;AACrB5D,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnMoB;;AAqMzBvI,EAAAA,iBAAiB,CAAC8D,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,cAAN,CAAqB;AACjB9D,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,UAAD,EAAa,QAAb,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,UAAX,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEgB;;AAqErBvI,EAAAA,iBAAiB,CAACgE,cAAlB,GAAmCA,cAAnC;;AACA,QAAME,6BAAN,CAAoC;AAChChE,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDiB,IAAAA,WAAW,CAACtB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACvD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnO+B;;AAqOpCvI,EAAAA,iBAAiB,CAACkE,6BAAlB,GAAkDA,6BAAlD;;AACA,QAAME,iCAAN,CAAwC;AACpClE,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKmC;;AAqKxCvI,EAAAA,iBAAiB,CAACoE,iCAAlB,GAAsDA,iCAAtD;;AACA,QAAME,iCAAN,CAAwC;AACpCpE,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnImC;;AAqIxCvI,EAAAA,iBAAiB,CAACsE,iCAAlB,GAAsDA,iCAAtD;;AACA,QAAME,uBAAN,CAA8B;AAC1BtE,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,IAA3B,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEyB;;AAqE9BvI,EAAAA,iBAAiB,CAACwE,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,kBAAN,CAAyB;AACrBxE,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD0I,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCoB;;AAqCzBvI,EAAAA,iBAAiB,CAAC0E,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,eAAN,CAAsB;AAClB1E,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD0I,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCiB;;AAqCtBvI,EAAAA,iBAAiB,CAAC4E,eAAlB,GAAoCA,eAApC;;AACA,QAAME,mBAAN,CAA0B;AACtB5E,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEqB;;AAqE1BvI,EAAAA,iBAAiB,CAAC8E,mBAAlB,GAAwCA,mBAAxC;;AACA,QAAME,uBAAN,CAA8B;AAC1B9E,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEyB;;AAqE9BvI,EAAAA,iBAAiB,CAACgF,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,yBAAN,CAAgC;AAC5BhF,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,QAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,WAAX,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnE2B;;AAqEhCvI,EAAAA,iBAAiB,CAACkF,yBAAlB,GAA8CA,yBAA9C;;AACA,QAAME,gCAAN,CAAuC;AACnClF,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEkC;;AAqEvCvI,EAAAA,iBAAiB,CAACoF,gCAAlB,GAAqDA,gCAArD;;AACA,QAAME,uBAAN,CAA8B;AAC1BpF,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,IAA3B,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEyB;;AAqE9BvI,EAAAA,iBAAiB,CAACsF,uBAAlB,GAA4CA,uBAA5C;;AACA,QAAME,eAAN,CAAsB;AAClBtF,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,IAA3B,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,EAAoB,WAApB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,WAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,WAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEiB;;AAqEtBvI,EAAAA,iBAAiB,CAACwF,eAAlB,GAAoCA,eAApC;;AACA,QAAME,wBAAN,CAA+B;AAC3BxF,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,kEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnK0B;;AAqK/BvI,EAAAA,iBAAiB,CAAC0F,wBAAlB,GAA6CA,wBAA7C;;AACA,QAAME,mBAAN,CAA0B;AACtB1F,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDoJ,IAAAA,YAAY,CAACvB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACxD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnMqB;;AAqM1BvI,EAAAA,iBAAiB,CAAC4F,mBAAlB,GAAwCA,mBAAxC;;AACA,QAAME,4BAAN,CAAmC;AAC/B5F,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnM8B;;AAqMnCvI,EAAAA,iBAAiB,CAAC8F,4BAAlB,GAAiDA,4BAAjD;;AACA,QAAME,sBAAN,CAA6B;AACzB9F,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEwB;;AAqE7BvI,EAAAA,iBAAiB,CAACgG,sBAAlB,GAA2CA,sBAA3C;;AACA,QAAME,oBAAN,CAA2B;AACvBhG,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,MAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,MAAD,EAAS,WAAT,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEsB;;AAqE3BvI,EAAAA,iBAAiB,CAACkG,oBAAlB,GAAyCA,oBAAzC;;AACA,QAAME,iBAAN,CAAwB;AACpBlG,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEmB;;AAqExBvI,EAAAA,iBAAiB,CAACoG,iBAAlB,GAAsCA,iBAAtC;;AACA,QAAME,gBAAN,CAAuB;AACnBpG,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD0I,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCkB;;AAqCvBvI,EAAAA,iBAAiB,CAACsG,gBAAlB,GAAqCA,gBAArC;;AACA,QAAME,yBAAN,CAAgC;AAC5BtG,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,cAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnK2B;;AAqKhCvI,EAAAA,iBAAiB,CAACwG,yBAAlB,GAA8CA,yBAA9C;;AACA,QAAME,8BAAN,CAAqC;AACjCxG,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uFADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,mBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,mBAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,mBAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnGgC;;AAqGrCvI,EAAAA,iBAAiB,CAAC0G,8BAAlB,GAAmDA,8BAAnD;;AACA,QAAME,gBAAN,CAAuB;AACnB1G,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACA,WAAKqJ,gBAAL,GACI,IAAIC,iCAAJ,CAAsC,KAAKtJ,OAA3C,CADJ;AAEA,WAAK0D,KAAL,GAAa,IAAI6F,sBAAJ,CAA2B,KAAKvJ,OAAhC,CAAb;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDsB,IAAAA,GAAG,CAAC3B,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,oEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAtOkB;;AAwOvBvI,EAAAA,iBAAiB,CAAC4G,gBAAlB,GAAqCA,gBAArC;;AACA,QAAM+C,iCAAN,CAAwC;AACpCzJ,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACDkJ,IAAAA,KAAK,CAACrB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnCmC;;AAqCxCvI,EAAAA,iBAAiB,CAAC2J,iCAAlB,GAAsDA,iCAAtD;;AACA,QAAMC,sBAAN,CAA6B;AACzB1J,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,EAA0B,QAA1B,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,QAAD,EAAW,WAAX,EAAwB,UAAxB,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,UAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,UAAd,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEwB;;AAqE7BvI,EAAAA,iBAAiB,CAAC4J,sBAAlB,GAA2CA,sBAA3C;;AACA,QAAM9C,cAAN,CAAqB;AACjB5G,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKgB;;AAqKrBvI,EAAAA,iBAAiB,CAAC8G,cAAlB,GAAmCA,cAAnC;;AACA,QAAME,cAAN,CAAqB;AACjB9G,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,mDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnGgB;;AAqGrBvI,EAAAA,iBAAiB,CAACgH,cAAlB,GAAmCA,cAAnC;;AACA,QAAME,oBAAN,CAA2B;AACvBhH,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,8DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,yDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnKsB;;AAqK3BvI,EAAAA,iBAAiB,CAACkH,oBAAlB,GAAyCA,oBAAzC;;AACA,QAAME,mCAAN,CAA0C;AACtClH,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,6EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,wEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,cAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEqC;;AAqE1CvI,EAAAA,iBAAiB,CAACoH,mCAAlB,GAAwDA,mCAAxD;;AACA,QAAME,2BAAN,CAAkC;AAC9BpH,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,qEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,gEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnK6B;;AAqKlCvI,EAAAA,iBAAiB,CAACsH,2BAAlB,GAAgDA,2BAAhD;;AACA,QAAME,qBAAN,CAA4B;AACxBtH,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,6CAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CAPD;AAQfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GAAG,iCAAX,EACAI,OADA,CACQ,cADR,EACwB,IADxB,CADc;AAGnBC,UAAAA,MAAM,EAAE;AAHW,SAAd,EAINxI,OAJM,CADM;AAMfkI,QAAAA,MANe;AAOfO,QAAAA,cAAc,EAAE,EAPD;AAQfC,QAAAA,UAAU,EAAE,EARG;AASfxI,QAAAA,OAAO,EAAE,KAAKA;AATC,OAAnB;;AAWA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAjEuB;;AAmE5BvI,EAAAA,iBAAiB,CAACwH,qBAAlB,GAA0CA,qBAA1C;;AACA,QAAME,iCAAN,CAAwC;AACpCxH,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,2EADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEmC;;AAqExCvI,EAAAA,iBAAiB,CAAC0H,iCAAlB,GAAsDA,iCAAtD;;AACA,QAAME,4BAAN,CAAmC;AAC/B1H,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,sEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,iEADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnE8B;;AAqEnCvI,EAAAA,iBAAiB,CAAC4H,4BAAlB,GAAiDA,4BAAjD;;AACA,QAAME,kBAAN,CAAyB;AACrB5H,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD8I,IAAAA,MAAM,CAACjB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDN,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,4DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDW,IAAAA,MAAM,CAAChB,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDS,IAAAA,KAAK,CAACd,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AACjD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDU,IAAAA,MAAM,CAACf,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAClD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,uDADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnMoB;;AAqMzBvI,EAAAA,iBAAiB,CAAC8H,kBAAlB,GAAuCA,kBAAvC;;AACA,QAAME,qBAAN,CAA4B;AACxB9H,IAAAA,WAAW,CAACG,OAAD,EAAU;AACjB,WAAKA,OAAL,GAAeA,OAAf;AACH;;AACD4H,IAAAA,GAAG,CAACC,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAC/C,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,+DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,EAAc,IAAd,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,IAAD,EAAO,WAAP,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AACDQ,IAAAA,IAAI,CAACb,gBAAD,EAAmBC,iBAAnB,EAAsCC,QAAtC,EAAgD;AAChD,UAAIC,MAAM,GAAIH,gBAAgB,IAAI,EAAlC;AACA,UAAI/H,OAAO,GAAIgI,iBAAiB,IAAI,EAApC;;AACA,UAAI,OAAOD,gBAAP,KAA4B,UAAhC,EAA4C;AACxCE,QAAAA,QAAQ,GAAGF,gBAAX;AACAG,QAAAA,MAAM,GAAG,EAAT;AACAlI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,UAAI,OAAOgI,iBAAP,KAA6B,UAAjC,EAA6C;AACzCC,QAAAA,QAAQ,GAAGD,iBAAX;AACAhI,QAAAA,OAAO,GAAG,EAAV;AACH;;AACD,YAAMmI,OAAO,GAAGnI,OAAO,CAACmI,OAAR,IAAmB,6BAAnC;AACA,YAAMC,UAAU,GAAG;AACfpI,QAAAA,OAAO,EAAET,MAAM,CAAC8I,MAAP,CAAc;AACnBC,UAAAA,GAAG,EAAE,CAACH,OAAO,GACT,0DADC,EAEAI,OAFA,CAEQ,cAFR,EAEwB,IAFxB,CADc;AAInBC,UAAAA,MAAM,EAAE;AAJW,SAAd,EAKNxI,OALM,CADM;AAOfkI,QAAAA,MAPe;AAQfO,QAAAA,cAAc,EAAE,CAAC,WAAD,CARD;AASfC,QAAAA,UAAU,EAAE,CAAC,WAAD,CATG;AAUfxI,QAAAA,OAAO,EAAE,KAAKA;AAVC,OAAnB;;AAYA,UAAI+H,QAAJ,EAAc;AACVtI,QAAAA,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,EAAiDH,QAAjD;AACH,OAFD,MAGK;AACD,eAAOtI,mBAAmB,CAACgJ,gBAApB,CAAqCP,UAArC,CAAP;AACH;AACJ;;AAnEuB;;AAqE5BvI,EAAAA,iBAAiB,CAACgI,qBAAlB,GAA0CA,qBAA1C;AACH,CA15ND,EA05NGhI,iBAAiB,GAAGJ,OAAO,CAACI,iBAAR,KAA8BJ,OAAO,CAACI,iBAAR,GAA4B,EAA1D,CA15NvB","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar dfareporting_v3_1;\n(function (dfareporting_v3_1) {\n    /**\n     * DCM/DFA Reporting And Trafficking API\n     *\n     * Manages your DoubleClick Campaign Manager ad campaigns and reports.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const dfareporting = google.dfareporting('v3.1');\n     *\n     * @namespace dfareporting\n     * @type {Function}\n     * @version v3.1\n     * @variation v3.1\n     * @param {object=} options Options for Dfareporting\n     */\n    class Dfareporting {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.accountActiveAdSummaries =\n                new Resource$Accountactiveadsummaries(this.context);\n            this.accountPermissionGroups =\n                new Resource$Accountpermissiongroups(this.context);\n            this.accountPermissions = new Resource$Accountpermissions(this.context);\n            this.accounts = new Resource$Accounts(this.context);\n            this.accountUserProfiles = new Resource$Accountuserprofiles(this.context);\n            this.ads = new Resource$Ads(this.context);\n            this.advertiserGroups = new Resource$Advertisergroups(this.context);\n            this.advertiserLandingPages =\n                new Resource$Advertiserlandingpages(this.context);\n            this.advertisers = new Resource$Advertisers(this.context);\n            this.browsers = new Resource$Browsers(this.context);\n            this.campaignCreativeAssociations =\n                new Resource$Campaigncreativeassociations(this.context);\n            this.campaigns = new Resource$Campaigns(this.context);\n            this.changeLogs = new Resource$Changelogs(this.context);\n            this.cities = new Resource$Cities(this.context);\n            this.connectionTypes = new Resource$Connectiontypes(this.context);\n            this.contentCategories = new Resource$Contentcategories(this.context);\n            this.conversions = new Resource$Conversions(this.context);\n            this.countries = new Resource$Countries(this.context);\n            this.creativeAssets = new Resource$Creativeassets(this.context);\n            this.creativeFields = new Resource$Creativefields(this.context);\n            this.creativeFieldValues = new Resource$Creativefieldvalues(this.context);\n            this.creativeGroups = new Resource$Creativegroups(this.context);\n            this.creatives = new Resource$Creatives(this.context);\n            this.dimensionValues = new Resource$Dimensionvalues(this.context);\n            this.directorySiteContacts =\n                new Resource$Directorysitecontacts(this.context);\n            this.directorySites = new Resource$Directorysites(this.context);\n            this.dynamicTargetingKeys =\n                new Resource$Dynamictargetingkeys(this.context);\n            this.eventTags = new Resource$Eventtags(this.context);\n            this.files = new Resource$Files(this.context);\n            this.floodlightActivities =\n                new Resource$Floodlightactivities(this.context);\n            this.floodlightActivityGroups =\n                new Resource$Floodlightactivitygroups(this.context);\n            this.floodlightConfigurations =\n                new Resource$Floodlightconfigurations(this.context);\n            this.inventoryItems = new Resource$Inventoryitems(this.context);\n            this.languages = new Resource$Languages(this.context);\n            this.metros = new Resource$Metros(this.context);\n            this.mobileApps = new Resource$Mobileapps(this.context);\n            this.mobileCarriers = new Resource$Mobilecarriers(this.context);\n            this.operatingSystems = new Resource$Operatingsystems(this.context);\n            this.operatingSystemVersions =\n                new Resource$Operatingsystemversions(this.context);\n            this.orderDocuments = new Resource$Orderdocuments(this.context);\n            this.orders = new Resource$Orders(this.context);\n            this.placementGroups = new Resource$Placementgroups(this.context);\n            this.placements = new Resource$Placements(this.context);\n            this.placementStrategies = new Resource$Placementstrategies(this.context);\n            this.platformTypes = new Resource$Platformtypes(this.context);\n            this.postalCodes = new Resource$Postalcodes(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.regions = new Resource$Regions(this.context);\n            this.remarketingLists = new Resource$Remarketinglists(this.context);\n            this.remarketingListShares =\n                new Resource$Remarketinglistshares(this.context);\n            this.reports = new Resource$Reports(this.context);\n            this.sites = new Resource$Sites(this.context);\n            this.sizes = new Resource$Sizes(this.context);\n            this.subaccounts = new Resource$Subaccounts(this.context);\n            this.targetableRemarketingLists =\n                new Resource$Targetableremarketinglists(this.context);\n            this.targetingTemplates = new Resource$Targetingtemplates(this.context);\n            this.userProfiles = new Resource$Userprofiles(this.context);\n            this.userRolePermissionGroups =\n                new Resource$Userrolepermissiongroups(this.context);\n            this.userRolePermissions = new Resource$Userrolepermissions(this.context);\n            this.userRoles = new Resource$Userroles(this.context);\n            this.videoFormats = new Resource$Videoformats(this.context);\n        }\n    }\n    dfareporting_v3_1.Dfareporting = Dfareporting;\n    class Resource$Accountactiveadsummaries {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountActiveAdSummaries/{summaryAccountId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'summaryAccountId'],\n                pathParams: ['profileId', 'summaryAccountId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Accountactiveadsummaries = Resource$Accountactiveadsummaries;\n    class Resource$Accountpermissiongroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissionGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissionGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Accountpermissiongroups = Resource$Accountpermissiongroups;\n    class Resource$Accountpermissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissions/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountPermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Accountpermissions = Resource$Accountpermissions;\n    class Resource$Accounts {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accounts/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Accounts = Resource$Accounts;\n    class Resource$Accountuserprofiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/accountUserProfiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Accountuserprofiles = Resource$Accountuserprofiles;\n    class Resource$Ads {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/ads/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}/ads')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Ads = Resource$Ads;\n    class Resource$Advertisergroups {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Advertisergroups = Resource$Advertisergroups;\n    class Resource$Advertiserlandingpages {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertiserLandingPages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Advertiserlandingpages = Resource$Advertiserlandingpages;\n    class Resource$Advertisers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertisers/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertisers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertisers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertisers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/advertisers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Advertisers = Resource$Advertisers;\n    class Resource$Browsers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/browsers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Browsers = Resource$Browsers;\n    class Resource$Campaigncreativeassociations {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'campaignId'],\n                pathParams: ['campaignId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{campaignId}/campaignCreativeAssociations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'campaignId'],\n                pathParams: ['campaignId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Campaigncreativeassociations = Resource$Campaigncreativeassociations;\n    class Resource$Campaigns {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/campaigns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Campaigns = Resource$Campaigns;\n    class Resource$Changelogs {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/changeLogs/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/changeLogs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Changelogs = Resource$Changelogs;\n    class Resource$Cities {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/cities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Cities = Resource$Cities;\n    class Resource$Connectiontypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/connectionTypes/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/connectionTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Connectiontypes = Resource$Connectiontypes;\n    class Resource$Contentcategories {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/contentCategories')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Contentcategories = Resource$Contentcategories;\n    class Resource$Conversions {\n        constructor(context) {\n            this.context = context;\n        }\n        batchinsert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/conversions/batchinsert')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchupdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/conversions/batchupdate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Conversions = Resource$Conversions;\n    class Resource$Countries {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/countries/{dartId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'dartId'],\n                pathParams: ['dartId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/countries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Countries = Resource$Countries;\n    class Resource$Creativeassets {\n        constructor(context) {\n            this.context = context;\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/dfareporting/v3.1/userprofiles/{profileId}/creativeAssets/{advertiserId}/creativeAssets')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['profileId', 'advertiserId'],\n                pathParams: ['advertiserId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Creativeassets = Resource$Creativeassets;\n    class Resource$Creativefields {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Creativefields = Resource$Creativefields;\n    class Resource$Creativefieldvalues {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId', 'id'],\n                pathParams: ['creativeFieldId', 'id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId', 'id'],\n                pathParams: ['creativeFieldId', 'id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId'],\n                pathParams: ['creativeFieldId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId'],\n                pathParams: ['creativeFieldId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId', 'id'],\n                pathParams: ['creativeFieldId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeFields/{creativeFieldId}/creativeFieldValues')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'creativeFieldId'],\n                pathParams: ['creativeFieldId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Creativefieldvalues = Resource$Creativefieldvalues;\n    class Resource$Creativegroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creativeGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Creativegroups = Resource$Creativegroups;\n    class Resource$Creatives {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creatives/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creatives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creatives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creatives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/creatives')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Creatives = Resource$Creatives;\n    class Resource$Dimensionvalues {\n        constructor(context) {\n            this.context = context;\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/dimensionvalues/query')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Dimensionvalues = Resource$Dimensionvalues;\n    class Resource$Directorysitecontacts {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/directorySiteContacts/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/directorySiteContacts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Directorysitecontacts = Resource$Directorysitecontacts;\n    class Resource$Directorysites {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/directorySites/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/directorySites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/directorySites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Directorysites = Resource$Directorysites;\n    class Resource$Dynamictargetingkeys {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys/{objectId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'objectId', 'name', 'objectType'],\n                pathParams: ['objectId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/dynamicTargetingKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Dynamictargetingkeys = Resource$Dynamictargetingkeys;\n    class Resource$Eventtags {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/eventTags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Eventtags = Resource$Eventtags;\n    class Resource$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/reports/{reportId}/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['reportId', 'fileId'],\n                pathParams: ['fileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/files')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Files = Resource$Files;\n    class Resource$Floodlightactivities {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        generatetag(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/generatetag')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Floodlightactivities = Resource$Floodlightactivities;\n    class Resource$Floodlightactivitygroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightActivityGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Floodlightactivitygroups = Resource$Floodlightactivitygroups;\n    class Resource$Floodlightconfigurations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/floodlightConfigurations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Floodlightconfigurations = Resource$Floodlightconfigurations;\n    class Resource$Inventoryitems {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/inventoryItems/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId', 'id'],\n                pathParams: ['id', 'profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/inventoryItems')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId'],\n                pathParams: ['profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Inventoryitems = Resource$Inventoryitems;\n    class Resource$Languages {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/languages')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Languages = Resource$Languages;\n    class Resource$Metros {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/metros')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Metros = Resource$Metros;\n    class Resource$Mobileapps {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/mobileApps/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/mobileApps')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Mobileapps = Resource$Mobileapps;\n    class Resource$Mobilecarriers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/mobileCarriers/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/mobileCarriers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Mobilecarriers = Resource$Mobilecarriers;\n    class Resource$Operatingsystems {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystems/{dartId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'dartId'],\n                pathParams: ['dartId', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystems')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Operatingsystems = Resource$Operatingsystems;\n    class Resource$Operatingsystemversions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystemVersions/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/operatingSystemVersions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Operatingsystemversions = Resource$Operatingsystemversions;\n    class Resource$Orderdocuments {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orderDocuments/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId', 'id'],\n                pathParams: ['id', 'profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orderDocuments')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId'],\n                pathParams: ['profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Orderdocuments = Resource$Orderdocuments;\n    class Resource$Orders {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orders/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId', 'id'],\n                pathParams: ['id', 'profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{projectId}/orders')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'projectId'],\n                pathParams: ['profileId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Orders = Resource$Orders;\n    class Resource$Placementgroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Placementgroups = Resource$Placementgroups;\n    class Resource$Placements {\n        constructor(context) {\n            this.context = context;\n        }\n        generatetags(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements/generatetags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placements')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Placements = Resource$Placements;\n    class Resource$Placementstrategies {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/placementStrategies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Placementstrategies = Resource$Placementstrategies;\n    class Resource$Platformtypes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/platformTypes/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/platformTypes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Platformtypes = Resource$Platformtypes;\n    class Resource$Postalcodes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/postalCodes/{code}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'code'],\n                pathParams: ['code', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/postalCodes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Postalcodes = Resource$Postalcodes;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/projects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Projects = Resource$Projects;\n    class Resource$Regions {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/regions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Regions = Resource$Regions;\n    class Resource$Remarketinglists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'advertiserId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingLists')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Remarketinglists = Resource$Remarketinglists;\n    class Resource$Remarketinglistshares {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares/{remarketingListId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'remarketingListId'],\n                pathParams: ['profileId', 'remarketingListId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'remarketingListId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/remarketingListShares')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Remarketinglistshares = Resource$Remarketinglistshares;\n    class Resource$Reports {\n        constructor(context) {\n            this.context = context;\n            this.compatibleFields =\n                new Resource$Reports$Compatiblefields(this.context);\n            this.files = new Resource$Reports$Files(this.context);\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        run(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/run')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Reports = Resource$Reports;\n    class Resource$Reports$Compatiblefields {\n        constructor(context) {\n            this.context = context;\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/compatiblefields/query')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Reports$Compatiblefields = Resource$Reports$Compatiblefields;\n    class Resource$Reports$Files {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/files/{fileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId', 'fileId'],\n                pathParams: ['fileId', 'profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/reports/{reportId}/files')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'reportId'],\n                pathParams: ['profileId', 'reportId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Reports$Files = Resource$Reports$Files;\n    class Resource$Sites {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sites/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sites')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Sites = Resource$Sites;\n    class Resource$Sizes {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sizes/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sizes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/sizes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Sizes = Resource$Sizes;\n    class Resource$Subaccounts {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/subaccounts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Subaccounts = Resource$Subaccounts;\n    class Resource$Targetableremarketinglists {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetableRemarketingLists/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetableRemarketingLists')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'advertiserId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Targetableremarketinglists = Resource$Targetableremarketinglists;\n    class Resource$Targetingtemplates {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/targetingTemplates')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Targetingtemplates = Resource$Targetingtemplates;\n    class Resource$Userprofiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles/{profileId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dfareporting/v3.1/userprofiles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Userprofiles = Resource$Userprofiles;\n    class Resource$Userrolepermissiongroups {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissionGroups/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissionGroups')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Userrolepermissiongroups = Resource$Userrolepermissiongroups;\n    class Resource$Userrolepermissions {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissions/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRolePermissions')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Userrolepermissions = Resource$Userrolepermissions;\n    class Resource$Userroles {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/userRoles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Userroles = Resource$Userroles;\n    class Resource$Videoformats {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/videoFormats/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId', 'id'],\n                pathParams: ['id', 'profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dfareporting/v3.1/userprofiles/{profileId}/videoFormats')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['profileId'],\n                pathParams: ['profileId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dfareporting_v3_1.Resource$Videoformats = Resource$Videoformats;\n})(dfareporting_v3_1 = exports.dfareporting_v3_1 || (exports.dfareporting_v3_1 = {}));\n//# sourceMappingURL=v3.1.js.map"]},"metadata":{},"sourceType":"script"}