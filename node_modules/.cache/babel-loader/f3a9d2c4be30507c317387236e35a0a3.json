{"ast":null,"code":"\"use strict\"; // Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst google_auth_library_1 = require(\"google-auth-library\");\n\nconst pify = require(\"pify\");\n\nconst url = require(\"url\");\n\nconst util = require(\"util\");\n\nconst apirequest_1 = require(\"./apirequest\");\n\nconst endpoint_1 = require(\"./endpoint\");\n\nconst fsp = pify(fs);\n\nclass Discovery {\n  /**\n   * Discovery for discovering API endpoints\n   *\n   * @param options Options for discovery\n   */\n  constructor(options) {\n    this.transporter = new google_auth_library_1.DefaultTransporter();\n    this.options = options || {};\n  }\n  /**\n   * Generate and Endpoint from an endpoint schema object.\n   *\n   * @param schema The schema from which to generate the Endpoint.\n   * @return A function that creates an endpoint.\n   */\n\n\n  makeEndpoint(schema) {\n    return options => {\n      const ep = new endpoint_1.Endpoint(options);\n      ep.applySchema(ep, schema, schema, ep);\n      return ep;\n    };\n  }\n  /**\n   * Log output of generator. Works just like console.log\n   */\n\n\n  log() {\n    if (this.options && this.options.debug) {\n      console.log(...arguments);\n    }\n  }\n  /**\n   * Generate all APIs and return as in-memory object.\n   * @param discoveryUrl\n   */\n\n\n  discoverAllAPIs(discoveryUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const headers = this.options.includePrivate ? {} : {\n        'X-User-Ip': '0.0.0.0'\n      };\n      const res = yield this.transporter.request({\n        url: discoveryUrl,\n        headers\n      });\n      const items = res.data.items;\n      const apis = yield Promise.all(items.map(api => __awaiter(this, void 0, void 0, function* () {\n        const endpointCreator = yield this.discoverAPI(api.discoveryRestUrl);\n        return {\n          api,\n          endpointCreator\n        };\n      })));\n      const versionIndex = {}; // tslint:disable-next-line no-any\n\n      const apisIndex = {};\n\n      for (const set of apis) {\n        if (!apisIndex[set.api.name]) {\n          versionIndex[set.api.name] = {};\n\n          apisIndex[set.api.name] = options => {\n            const type = typeof options;\n            let version;\n\n            if (type === 'string') {\n              version = options;\n              options = {};\n            } else if (type === 'object') {\n              version = options.version;\n              delete options.version;\n            } else {\n              throw new Error('Argument error: Accepts only string or object');\n            }\n\n            try {\n              const ep = // tslint:disable-next-line: no-any\n              set.endpointCreator(options, this);\n              return Object.freeze(ep); // create new & freeze\n            } catch (e) {\n              throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n            }\n          };\n        }\n\n        versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n      }\n\n      return apisIndex;\n    });\n  }\n  /**\n   * Generate API file given discovery URL\n   *\n   * @param apiDiscoveryUrl URL or filename of discovery doc for API\n   * @returns A promise that resolves with a function that creates the endpoint\n   */\n\n\n  discoverAPI(apiDiscoveryUrl) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (typeof apiDiscoveryUrl === 'string') {\n        const parts = url.parse(apiDiscoveryUrl);\n\n        if (apiDiscoveryUrl && !parts.protocol) {\n          this.log('Reading from file ' + apiDiscoveryUrl);\n          const file = yield fsp.readFile(apiDiscoveryUrl, {\n            encoding: 'utf8'\n          });\n          return this.makeEndpoint(JSON.parse(file));\n        } else {\n          this.log('Requesting ' + apiDiscoveryUrl);\n          const res = yield this.transporter.request({\n            url: apiDiscoveryUrl\n          });\n          return this.makeEndpoint(res.data);\n        }\n      } else {\n        const options = apiDiscoveryUrl;\n        this.log('Requesting ' + options.url);\n        const url = options.url;\n        delete options.url;\n        const parameters = {\n          options: {\n            url,\n            method: 'GET'\n          },\n          requiredParams: [],\n          pathParams: [],\n          params: options,\n          context: {\n            google: {\n              _options: {}\n            },\n            _options: {}\n          }\n        };\n        const pcr = pify(apirequest_1.createAPIRequest);\n        const res = yield pcr(parameters);\n        return this.makeEndpoint(res.data);\n      }\n    });\n  }\n\n}\n\nexports.Discovery = Discovery;","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enk√§t/Release/xai-survey-app/node_modules/googleapis-common/build/src/discovery.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","google_auth_library_1","pify","url","util","apirequest_1","endpoint_1","fsp","Discovery","constructor","options","transporter","DefaultTransporter","makeEndpoint","schema","ep","Endpoint","applySchema","log","debug","console","discoverAllAPIs","discoveryUrl","headers","includePrivate","res","request","items","data","apis","all","map","api","endpointCreator","discoverAPI","discoveryRestUrl","versionIndex","apisIndex","set","name","type","version","Error","freeze","format","message","apiDiscoveryUrl","parts","parse","protocol","file","readFile","encoding","JSON","parameters","method","requiredParams","pathParams","params","context","google","_options","pcr","createAPIRequest"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2014-2016, Google, Inc.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst google_auth_library_1 = require(\"google-auth-library\");\nconst pify = require(\"pify\");\nconst url = require(\"url\");\nconst util = require(\"util\");\nconst apirequest_1 = require(\"./apirequest\");\nconst endpoint_1 = require(\"./endpoint\");\nconst fsp = pify(fs);\nclass Discovery {\n    /**\n     * Discovery for discovering API endpoints\n     *\n     * @param options Options for discovery\n     */\n    constructor(options) {\n        this.transporter = new google_auth_library_1.DefaultTransporter();\n        this.options = options || {};\n    }\n    /**\n     * Generate and Endpoint from an endpoint schema object.\n     *\n     * @param schema The schema from which to generate the Endpoint.\n     * @return A function that creates an endpoint.\n     */\n    makeEndpoint(schema) {\n        return (options) => {\n            const ep = new endpoint_1.Endpoint(options);\n            ep.applySchema(ep, schema, schema, ep);\n            return ep;\n        };\n    }\n    /**\n     * Log output of generator. Works just like console.log\n     */\n    log(...args) {\n        if (this.options && this.options.debug) {\n            console.log(...args);\n        }\n    }\n    /**\n     * Generate all APIs and return as in-memory object.\n     * @param discoveryUrl\n     */\n    discoverAllAPIs(discoveryUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const headers = this.options.includePrivate ? {} : { 'X-User-Ip': '0.0.0.0' };\n            const res = yield this.transporter.request({ url: discoveryUrl, headers });\n            const items = res.data.items;\n            const apis = yield Promise.all(items.map((api) => __awaiter(this, void 0, void 0, function* () {\n                const endpointCreator = yield this.discoverAPI(api.discoveryRestUrl);\n                return { api, endpointCreator };\n            })));\n            const versionIndex = {};\n            // tslint:disable-next-line no-any\n            const apisIndex = {};\n            for (const set of apis) {\n                if (!apisIndex[set.api.name]) {\n                    versionIndex[set.api.name] = {};\n                    apisIndex[set.api.name] = (options) => {\n                        const type = typeof options;\n                        let version;\n                        if (type === 'string') {\n                            version = options;\n                            options = {};\n                        }\n                        else if (type === 'object') {\n                            version = options.version;\n                            delete options.version;\n                        }\n                        else {\n                            throw new Error('Argument error: Accepts only string or object');\n                        }\n                        try {\n                            const ep = \n                            // tslint:disable-next-line: no-any\n                            set.endpointCreator(options, this);\n                            return Object.freeze(ep); // create new & freeze\n                        }\n                        catch (e) {\n                            throw new Error(util.format('Unable to load endpoint %s(\"%s\"): %s', set.api.name, version, e.message));\n                        }\n                    };\n                }\n                versionIndex[set.api.name][set.api.version] = set.endpointCreator;\n            }\n            return apisIndex;\n        });\n    }\n    /**\n     * Generate API file given discovery URL\n     *\n     * @param apiDiscoveryUrl URL or filename of discovery doc for API\n     * @returns A promise that resolves with a function that creates the endpoint\n     */\n    discoverAPI(apiDiscoveryUrl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof apiDiscoveryUrl === 'string') {\n                const parts = url.parse(apiDiscoveryUrl);\n                if (apiDiscoveryUrl && !parts.protocol) {\n                    this.log('Reading from file ' + apiDiscoveryUrl);\n                    const file = yield fsp.readFile(apiDiscoveryUrl, { encoding: 'utf8' });\n                    return this.makeEndpoint(JSON.parse(file));\n                }\n                else {\n                    this.log('Requesting ' + apiDiscoveryUrl);\n                    const res = yield this.transporter.request({ url: apiDiscoveryUrl });\n                    return this.makeEndpoint(res.data);\n                }\n            }\n            else {\n                const options = apiDiscoveryUrl;\n                this.log('Requesting ' + options.url);\n                const url = options.url;\n                delete options.url;\n                const parameters = {\n                    options: { url, method: 'GET' },\n                    requiredParams: [],\n                    pathParams: [],\n                    params: options,\n                    context: { google: { _options: {} }, _options: {} }\n                };\n                const pcr = pify(apirequest_1.createAPIRequest);\n                const res = yield pcr(parameters);\n                return this.makeEndpoint(res.data);\n            }\n        });\n    }\n}\nexports.Discovery = Discovery;\n//# sourceMappingURL=discovery.js.map"]},"metadata":{},"sourceType":"script"}