{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst fs = require(\"fs\");\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jws = require(\"jws\");\n\nconst mime = require(\"mime\");\n\nconst pify = require(\"pify\");\n\nconst readFile = pify(fs.readFile);\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\n\nclass ErrorWithCode extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n\n}\n\nlet getPem;\n\nclass GoogleToken {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  constructor(options) {\n    this.token = null;\n    this.expiresAt = null;\n    this.rawToken = null;\n    this.tokenExpires = null;\n    this.configure(options);\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n\n\n  hasExpired() {\n    const now = new Date().getTime();\n\n    if (this.token && this.expiresAt) {\n      return now >= this.expiresAt;\n    } else {\n      return true;\n    }\n  }\n\n  getToken(callback) {\n    if (callback) {\n      this.getTokenAsync().then(t => callback(null, t), callback);\n      return;\n    }\n\n    return this.getTokenAsync();\n  }\n  /**\n   * Given a keyFile, extract the key and client email if available\n   * @param keyFile Path to a json, pem, or p12 file that contains the key.\n   * @returns an object with privateKey and clientEmail properties\n   */\n\n\n  getCredentials(keyFile) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const mimeType = mime.getType(keyFile);\n\n      switch (mimeType) {\n        case 'application/json':\n          {\n            // *.json file\n            const key = yield readFile(keyFile, 'utf8');\n            const body = JSON.parse(key);\n            const privateKey = body.private_key;\n            const clientEmail = body.client_email;\n\n            if (!privateKey || !clientEmail) {\n              throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n            }\n\n            return {\n              privateKey,\n              clientEmail\n            };\n          }\n\n        case 'application/x-x509-ca-cert':\n          {\n            // *.pem file\n            const privateKey = yield readFile(keyFile, 'utf8');\n            return {\n              privateKey\n            };\n          }\n\n        case 'application/x-pkcs12':\n          {\n            // *.p12 file\n            // NOTE:  The loading of `google-p12-pem` is deferred for performance\n            // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n            // bit time to overall module loading, and is likely not frequently\n            // used.  In a future release, p12 support will be entirely removed.\n            if (!getPem) {\n              getPem = (yield Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n            }\n\n            const privateKey = yield getPem(keyFile);\n            return {\n              privateKey\n            };\n          }\n\n        default:\n          throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n      }\n    });\n  }\n\n  getTokenAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.hasExpired()) {\n        return Promise.resolve(this.token);\n      }\n\n      if (!this.key && !this.keyFile) {\n        throw new Error('No key or keyFile set.');\n      }\n\n      if (!this.key && this.keyFile) {\n        const creds = yield this.getCredentials(this.keyFile);\n        this.key = creds.privateKey;\n        this.iss = creds.clientEmail || this.iss;\n\n        if (!creds.clientEmail) {\n          this.ensureEmail();\n        }\n      }\n\n      return this.requestToken();\n    });\n  }\n\n  ensureEmail() {\n    if (!this.iss) {\n      throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n  }\n\n  revokeToken(callback) {\n    if (callback) {\n      this.revokeTokenAsync().then(() => callback(), callback);\n      return;\n    }\n\n    return this.revokeTokenAsync();\n  }\n\n  revokeTokenAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.token) {\n        throw new Error('No token to revoke.');\n      }\n\n      return gaxios_1.request({\n        url: GOOGLE_REVOKE_TOKEN_URL + this.token\n      }).then(r => {\n        this.configure({\n          email: this.iss,\n          sub: this.sub,\n          key: this.key,\n          keyFile: this.keyFile,\n          scope: this.scope,\n          additionalClaims: this.additionalClaims\n        });\n      });\n    });\n  }\n  /**\n   * Configure the GoogleToken for re-use.\n   * @param  {object} options Configuration object.\n   */\n\n\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.token = this.expiresAt = this.rawToken = null;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n\n    if (typeof options.scope === 'object') {\n      this.scope = options.scope.join(' ');\n    } else {\n      this.scope = options.scope;\n    }\n  }\n  /**\n   * Request the token from Google.\n   */\n\n\n  requestToken() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const iat = Math.floor(new Date().getTime() / 1000);\n      const additionalClaims = this.additionalClaims || {};\n      const payload = Object.assign({\n        iss: this.iss,\n        scope: this.scope,\n        aud: GOOGLE_TOKEN_URL,\n        exp: iat + 3600,\n        iat,\n        sub: this.sub\n      }, additionalClaims);\n      const signedJWT = jws.sign({\n        header: {\n          alg: 'RS256'\n        },\n        payload,\n        secret: this.key\n      });\n      return gaxios_1.request({\n        method: 'POST',\n        url: GOOGLE_TOKEN_URL,\n        data: {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: signedJWT\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        responseType: 'json'\n      }).then(r => {\n        this.rawToken = r.data;\n        this.token = r.data.access_token;\n        this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? null : (iat + r.data.expires_in) * 1000;\n        return this.token;\n      }).catch(e => {\n        this.token = null;\n        this.tokenExpires = null;\n        const body = e.response && e.response.data ? e.response.data : {};\n\n        if (body.error) {\n          const desc = body.error_description ? `: ${body.error_description}` : '';\n          e.message = `${body.error}${desc}`;\n        }\n\n        throw e;\n      });\n    });\n  }\n\n}\n\nexports.GoogleToken = GoogleToken;","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enk√§t/Release/xai-survey-app/node_modules/googleapis-common/node_modules/gtoken/build/src/index.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","fs","require","gaxios_1","jws","mime","pify","readFile","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","ErrorWithCode","Error","constructor","message","code","getPem","GoogleToken","options","token","expiresAt","rawToken","tokenExpires","configure","hasExpired","now","Date","getTime","getToken","callback","getTokenAsync","t","getCredentials","keyFile","mimeType","getType","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","creds","iss","ensureEmail","requestToken","revokeToken","revokeTokenAsync","request","url","r","email","sub","scope","additionalClaims","join","iat","Math","floor","payload","assign","aud","exp","signedJWT","sign","header","alg","secret","method","data","grant_type","assertion","headers","responseType","access_token","expires_in","undefined","catch","response","error","desc","error_description"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst mime = require(\"mime\");\nconst pify = require(\"pify\");\nconst readFile = pify(fs.readFile);\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.token = null;\n        this.expiresAt = null;\n        this.rawToken = null;\n        this.tokenExpires = null;\n        this.configure(options);\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = (new Date()).getTime();\n        if (this.token && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback) {\n        if (callback) {\n            this.getTokenAsync().then(t => callback(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync();\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    getCredentials(keyFile) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mimeType = mime.getType(keyFile);\n            switch (mimeType) {\n                case 'application/json': {\n                    // *.json file\n                    const key = yield readFile(keyFile, 'utf8');\n                    const body = JSON.parse(key);\n                    const privateKey = body.private_key;\n                    const clientEmail = body.client_email;\n                    if (!privateKey || !clientEmail) {\n                        throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                    }\n                    return { privateKey, clientEmail };\n                }\n                case 'application/x-x509-ca-cert': {\n                    // *.pem file\n                    const privateKey = yield readFile(keyFile, 'utf8');\n                    return { privateKey };\n                }\n                case 'application/x-pkcs12': {\n                    // *.p12 file\n                    // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                    // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                    // bit time to overall module loading, and is likely not frequently\n                    // used.  In a future release, p12 support will be entirely removed.\n                    if (!getPem) {\n                        getPem = (yield Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                    }\n                    const privateKey = yield getPem(keyFile);\n                    return { privateKey };\n                }\n                default:\n                    throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                        'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n            }\n        });\n    }\n    getTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.hasExpired()) {\n                return Promise.resolve(this.token);\n            }\n            if (!this.key && !this.keyFile) {\n                throw new Error('No key or keyFile set.');\n            }\n            if (!this.key && this.keyFile) {\n                const creds = yield this.getCredentials(this.keyFile);\n                this.key = creds.privateKey;\n                this.iss = creds.clientEmail || this.iss;\n                if (!creds.clientEmail) {\n                    this.ensureEmail();\n                }\n            }\n            return this.requestToken();\n        });\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    revokeTokenAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.token) {\n                throw new Error('No token to revoke.');\n            }\n            return gaxios_1.request({ url: GOOGLE_REVOKE_TOKEN_URL + this.token }).then(r => {\n                this.configure({\n                    email: this.iss,\n                    sub: this.sub,\n                    key: this.key,\n                    keyFile: this.keyFile,\n                    scope: this.scope,\n                    additionalClaims: this.additionalClaims,\n                });\n            });\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.token = this.expiresAt = this.rawToken = null;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n    }\n    /**\n     * Request the token from Google.\n     */\n    requestToken() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const iat = Math.floor(new Date().getTime() / 1000);\n            const additionalClaims = this.additionalClaims || {};\n            const payload = Object.assign({\n                iss: this.iss,\n                scope: this.scope,\n                aud: GOOGLE_TOKEN_URL,\n                exp: iat + 3600,\n                iat,\n                sub: this.sub\n            }, additionalClaims);\n            const signedJWT = jws.sign({ header: { alg: 'RS256' }, payload, secret: this.key });\n            return gaxios_1.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json'\n            })\n                .then(r => {\n                this.rawToken = r.data;\n                this.token = r.data.access_token;\n                this.expiresAt =\n                    (r.data.expires_in === null || r.data.expires_in === undefined) ?\n                        null :\n                        (iat + r.data.expires_in) * 1000;\n                return this.token;\n            })\n                .catch(e => {\n                this.token = null;\n                this.tokenExpires = null;\n                const body = (e.response && e.response.data) ? e.response.data : {};\n                if (body.error) {\n                    const desc = body.error_description ? `: ${body.error_description}` : '';\n                    e.message = `${body.error}${desc}`;\n                }\n                throw e;\n            });\n        });\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}