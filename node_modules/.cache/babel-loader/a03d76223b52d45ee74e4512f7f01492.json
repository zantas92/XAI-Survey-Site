{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst extend = require(\"extend\");\n\nconst node_fetch_1 = require(\"node-fetch\");\n\nconst qs = require(\"querystring\");\n\nconst stream = require(\"stream\");\n\nconst url = require(\"url\");\n\nconst common_1 = require(\"./common\");\n\nconst isbrowser_1 = require(\"./isbrowser\");\n\nconst retry_1 = require(\"./retry\");\n\nconst URL = isbrowser_1.isBrowser() ? window.URL : url.URL;\nconst fetch = isbrowser_1.isBrowser() ? window.fetch : node_fetch_1.default; // tslint:disable-next-line variable-name no-any\n\nlet HttpsProxyAgent; // Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\n\nfunction loadProxy() {\n  const proxy = process.env.HTTPS_PROXY || process.env.https_proxy || process.env.HTTP_PROXY || process.env.http_proxy;\n\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n\n  return proxy;\n}\n\nloadProxy();\n\nclass Gaxios {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  constructor(defaults) {\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n\n\n  request() {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return __awaiter(this, void 0, void 0, function* () {\n      opts = this.validateOpts(opts);\n\n      try {\n        let translatedResponse;\n\n        if (opts.adapter) {\n          translatedResponse = yield opts.adapter(opts);\n        } else {\n          const res = yield fetch(opts.url, opts);\n          const data = yield this.getResponseData(opts, res);\n          translatedResponse = this.translateResponse(opts, res, data);\n        }\n\n        if (!opts.validateStatus(translatedResponse.status)) {\n          throw new common_1.GaxiosError(`Request failed with status code ${translatedResponse.status}`, opts, translatedResponse);\n        }\n\n        return translatedResponse;\n      } catch (e) {\n        const err = e;\n        err.config = opts;\n        const {\n          shouldRetry,\n          config\n        } = yield retry_1.getRetryConfig(e);\n\n        if (shouldRetry && config) {\n          err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n          return this.request(err.config);\n        }\n\n        throw err;\n      }\n    });\n  }\n\n  getResponseData(opts, res) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (opts.responseType) {\n        case 'stream':\n          return res.body;\n\n        case 'json':\n          let data = yield res.text();\n\n          try {\n            data = JSON.parse(data);\n          } catch (e) {}\n\n          return data;\n\n        case 'arraybuffer':\n          return res.arrayBuffer();\n\n        case 'blob':\n          return res.blob();\n\n        default:\n          return res.text();\n      }\n    });\n  }\n  /**\n   * Validates the options, and merges them with defaults.\n   * @param opts The original options passed from the client.\n   */\n\n\n  validateOpts(options) {\n    const opts = extend(true, {}, this.defaults, options);\n\n    if (!opts.url) {\n      throw new Error('URL is required.');\n    } // baseUrl has been deprecated, remove in 2.0\n\n\n    const baseUrl = opts.baseUrl || opts.baseURL;\n\n    if (baseUrl) {\n      opts.url = baseUrl + opts.url;\n    }\n\n    const parsedUrl = new URL(opts.url);\n    opts.url = `${parsedUrl.origin}${parsedUrl.pathname}`;\n    opts.params = extend(qs.parse(parsedUrl.search.substr(1)), // removes leading ?\n    opts.params);\n    opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n\n    if (opts.params) {\n      parsedUrl.search = opts.paramsSerializer(opts.params);\n    }\n\n    opts.url = parsedUrl.href;\n\n    if (typeof options.maxContentLength === 'number') {\n      opts.size = options.maxContentLength;\n    }\n\n    if (typeof options.maxRedirects === 'number') {\n      opts.follow = options.maxRedirects;\n    }\n\n    opts.headers = opts.headers || {};\n\n    if (opts.data) {\n      if (this.isReadableStream(opts.data)) {\n        opts.body = opts.data;\n      } else if (typeof opts.data === 'object') {\n        opts.body = JSON.stringify(opts.data);\n        opts.headers['Content-Type'] = 'application/json';\n      } else {\n        opts.body = opts.data;\n      }\n    }\n\n    opts.validateStatus = opts.validateStatus || this.validateStatus;\n    opts.responseType = opts.responseType || 'json';\n\n    if (!opts.headers['Accept'] && opts.responseType === 'json') {\n      opts.headers['Accept'] = 'application/json';\n    }\n\n    opts.method = opts.method || 'GET';\n    const proxy = loadProxy();\n\n    if (proxy) {\n      if (this.agentCache.has(proxy)) {\n        opts.agent = this.agentCache.get(proxy);\n      } else {\n        opts.agent = new HttpsProxyAgent(proxy);\n        this.agentCache.set(proxy, opts.agent);\n      }\n    }\n\n    return opts;\n  }\n  /**\n   * By default, throw for any non-2xx status code\n   * @param status status code from the HTTP response\n   */\n\n\n  validateStatus(status) {\n    return status >= 200 && status < 300;\n  }\n  /**\n   * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n   * @param params key value pars to encode\n   */\n\n\n  paramsSerializer(params) {\n    return qs.stringify(params);\n  }\n\n  isReadableStream(obj) {\n    return obj instanceof stream.Readable && typeof obj._read === 'function';\n  }\n\n  translateResponse(opts, res, data) {\n    // headers need to be converted from a map to an obj\n    const headers = {};\n    res.headers.forEach((value, key) => {\n      headers[key] = value;\n    });\n    return {\n      config: opts,\n      data: data,\n      headers,\n      status: res.status,\n      statusText: res.statusText\n    };\n  }\n\n}\n\nexports.Gaxios = Gaxios;","map":{"version":3,"mappings":"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","names":["URL","isbrowser_1","window","url","fetch","node_fetch_1","HttpsProxyAgent","loadProxy","proxy","process","env","HTTPS_PROXY","https_proxy","HTTP_PROXY","http_proxy","require","Gaxios","constructor","defaults","Map","request","opts","validateOpts","translatedResponse","adapter","res","data","getResponseData","translateResponse","validateStatus","status","common_1","e","err","config","shouldRetry","retry_1","retryConfig","currentRetryAttempt","responseType","body","text","JSON","parse","arrayBuffer","blob","options","extend","Error","baseUrl","baseURL","parsedUrl","origin","pathname","params","qs","search","substr","paramsSerializer","href","maxContentLength","size","maxRedirects","follow","headers","isReadableStream","stringify","method","agentCache","has","agent","get","set","obj","stream","Readable","_read","forEach","value","key","statusText","exports"],"sources":["../../src/gaxios.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}