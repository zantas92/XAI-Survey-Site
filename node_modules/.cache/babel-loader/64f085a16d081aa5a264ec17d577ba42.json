{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gcpMetadata = require(\"gcp-metadata\");\n\nconst messages = require(\"../messages\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass Compute extends oauth2client_1.OAuth2Client {\n  /**\n   * Google Compute Engine service account credentials.\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options); // Start with an expired refresh token, which will automatically be\n    // refreshed before the first API call is made.\n\n    this.credentials = {\n      expiry_date: 1,\n      refresh_token: 'compute-placeholder'\n    };\n    this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createdScoped before use.\n   * @deprecated\n   * @return Boolean indicating if scope is required.\n   */\n\n\n  createScopedRequired() {\n    // On compute engine, scopes are specified at the compute instance's\n    // creation time, and cannot be changed. For this reason, always return\n    // false.\n    messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n    return false;\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken Unused parameter\n   */\n\n\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n      let data;\n\n      try {\n        data = yield gcpMetadata.instance(tokenPath);\n      } catch (e) {\n        e.message = 'Could not refresh access token.';\n        throw e;\n      }\n\n      const tokens = data;\n\n      if (data && data.expires_in) {\n        tokens.expiry_date = new Date().getTime() + data.expires_in * 1000;\n        delete tokens.expires_in;\n      }\n\n      this.emit('tokens', tokens);\n      return {\n        tokens,\n        res: null\n      };\n    });\n  }\n\n  requestAsync(opts) {\n    let retry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return super.requestAsync(opts, retry).catch(e => {\n      const res = e.response;\n\n      if (res && res.status) {\n        let helpfulMessage = null;\n\n        if (res.status === 403) {\n          helpfulMessage = 'A Forbidden error was returned while attempting to retrieve an access ' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have the correct permission scopes specified.';\n        } else if (res.status === 404) {\n          helpfulMessage = 'A Not Found error was returned while attempting to retrieve an access' + 'token for the Compute Engine built-in service account. This may be because the Compute ' + 'Engine instance does not have any permission scopes specified.';\n        }\n\n        if (helpfulMessage) {\n          if (e && e.message && !retry) {\n            helpfulMessage += ' ' + e.message;\n          }\n\n          if (e) {\n            e.message = helpfulMessage;\n          } else {\n            e = new Error(helpfulMessage);\n            e.code = res.status.toString();\n          }\n        }\n      }\n\n      throw e;\n    });\n  }\n\n}\n\nexports.Compute = Compute;","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enk√§t/Release/xai-survey-app/node_modules/googleapis-common/node_modules/google-auth-library/build/src/auth/computeclient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gcpMetadata","require","messages","oauth2client_1","Compute","OAuth2Client","constructor","options","credentials","expiry_date","refresh_token","serviceAccountEmail","createScopedRequired","warn","COMPUTE_CREATE_SCOPED_DEPRECATED","refreshTokenNoCache","refreshToken","tokenPath","data","instance","message","tokens","expires_in","Date","getTime","emit","res","requestAsync","opts","retry","catch","response","status","helpfulMessage","Error","code","toString"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gcpMetadata = require(\"gcp-metadata\");\nconst messages = require(\"../messages\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass Compute extends oauth2client_1.OAuth2Client {\n    /**\n     * Google Compute Engine service account credentials.\n     *\n     * Retrieve access token from the metadata server.\n     * See: https://developers.google.com/compute/docs/authentication\n     */\n    constructor(options = {}) {\n        super(options);\n        // Start with an expired refresh token, which will automatically be\n        // refreshed before the first API call is made.\n        this.credentials = { expiry_date: 1, refresh_token: 'compute-placeholder' };\n        this.serviceAccountEmail = options.serviceAccountEmail || 'default';\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createdScoped before use.\n     * @deprecated\n     * @return Boolean indicating if scope is required.\n     */\n    createScopedRequired() {\n        // On compute engine, scopes are specified at the compute instance's\n        // creation time, and cannot be changed. For this reason, always return\n        // false.\n        messages.warn(messages.COMPUTE_CREATE_SCOPED_DEPRECATED);\n        return false;\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken Unused parameter\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const tokenPath = `service-accounts/${this.serviceAccountEmail}/token`;\n            let data;\n            try {\n                data = yield gcpMetadata.instance(tokenPath);\n            }\n            catch (e) {\n                e.message = 'Could not refresh access token.';\n                throw e;\n            }\n            const tokens = data;\n            if (data && data.expires_in) {\n                tokens.expiry_date = ((new Date()).getTime() + (data.expires_in * 1000));\n                delete tokens.expires_in;\n            }\n            this.emit('tokens', tokens);\n            return { tokens, res: null };\n        });\n    }\n    requestAsync(opts, retry = false) {\n        return super.requestAsync(opts, retry).catch(e => {\n            const res = e.response;\n            if (res && res.status) {\n                let helpfulMessage = null;\n                if (res.status === 403) {\n                    helpfulMessage =\n                        'A Forbidden error was returned while attempting to retrieve an access ' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have the correct permission scopes specified.';\n                }\n                else if (res.status === 404) {\n                    helpfulMessage =\n                        'A Not Found error was returned while attempting to retrieve an access' +\n                            'token for the Compute Engine built-in service account. This may be because the Compute ' +\n                            'Engine instance does not have any permission scopes specified.';\n                }\n                if (helpfulMessage) {\n                    if (e && e.message && !retry) {\n                        helpfulMessage += ' ' + e.message;\n                    }\n                    if (e) {\n                        e.message = helpfulMessage;\n                    }\n                    else {\n                        e = new Error(helpfulMessage);\n                        e.code = res.status.toString();\n                    }\n                }\n            }\n            throw e;\n        });\n    }\n}\nexports.Compute = Compute;\n//# sourceMappingURL=computeclient.js.map"]},"metadata":{},"sourceType":"script"}