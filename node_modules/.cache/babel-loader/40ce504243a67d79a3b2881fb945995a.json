{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar bigquery_v2;\n\n(function (bigquery_v2) {\n  /**\n   * BigQuery API\n   *\n   * A data platform for customers to create, manage, share and query data.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const bigquery = google.bigquery('v2');\n   *\n   * @namespace bigquery\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Bigquery\n   */\n  class Bigquery {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.datasets = new Resource$Datasets(this.context);\n      this.jobs = new Resource$Jobs(this.context);\n      this.models = new Resource$Models(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.tabledata = new Resource$Tabledata(this.context);\n      this.tables = new Resource$Tables(this.context);\n    }\n\n  }\n\n  bigquery_v2.Bigquery = Bigquery;\n\n  class Resource$Datasets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Datasets = Resource$Datasets;\n\n  class Resource$Jobs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}/cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getQueryResults(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries/{jobId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'jobId'],\n        pathParams: ['jobId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    query(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Jobs = Resource$Jobs;\n\n  class Resource$Models {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'modelId'],\n        pathParams: ['datasetId', 'modelId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Models = Resource$Models;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/serviceAccount').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId'],\n        pathParams: ['projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Projects = Resource$Projects;\n\n  class Resource$Tabledata {\n    constructor(context) {\n      this.context = context;\n    }\n\n    insertAll(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Tabledata = Resource$Tabledata;\n\n  class Resource$Tables {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId'],\n        pathParams: ['datasetId', 'projectId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['projectId', 'datasetId', 'tableId'],\n        pathParams: ['datasetId', 'projectId', 'tableId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  bigquery_v2.Resource$Tables = Resource$Tables;\n})(bigquery_v2 = exports.bigquery_v2 || (exports.bigquery_v2 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/bigquery/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","bigquery_v2","Bigquery","constructor","options","google","context","_options","datasets","Resource$Datasets","jobs","Resource$Jobs","models","Resource$Models","projects","Resource$Projects","tabledata","Resource$Tabledata","tables","Resource$Tables","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","insert","list","patch","update","cancel","getQueryResults","mediaUrl","query","getServiceAccount","insertAll"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar bigquery_v2;\n(function (bigquery_v2) {\n    /**\n     * BigQuery API\n     *\n     * A data platform for customers to create, manage, share and query data.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const bigquery = google.bigquery('v2');\n     *\n     * @namespace bigquery\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Bigquery\n     */\n    class Bigquery {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.datasets = new Resource$Datasets(this.context);\n            this.jobs = new Resource$Jobs(this.context);\n            this.models = new Resource$Models(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.tabledata = new Resource$Tabledata(this.context);\n            this.tables = new Resource$Tables(this.context);\n        }\n    }\n    bigquery_v2.Bigquery = Bigquery;\n    class Resource$Datasets {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/datasets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Datasets = Resource$Datasets;\n    class Resource$Jobs {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/jobs/{jobId}/cancel')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs/{jobId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getQueryResults(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/queries/{jobId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'jobId'],\n                pathParams: ['jobId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl + '/upload/bigquery/v2/projects/{projectId}/jobs')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/jobs')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        query(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/queries')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Jobs = Resource$Jobs;\n    class Resource$Models {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{+projectId}/datasets/{+datasetId}/models/{+modelId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'modelId'],\n                pathParams: ['datasetId', 'modelId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Models = Resource$Models;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        getServiceAccount(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects/{projectId}/serviceAccount')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId'],\n                pathParams: ['projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/bigquery/v2/projects')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Projects = Resource$Projects;\n    class Resource$Tabledata {\n        constructor(context) {\n            this.context = context;\n        }\n        insertAll(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/insertAll')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}/data')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Tabledata = Resource$Tabledata;\n    class Resource$Tables {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId'],\n                pathParams: ['datasetId', 'projectId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/bigquery/v2/projects/{projectId}/datasets/{datasetId}/tables/{tableId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['projectId', 'datasetId', 'tableId'],\n                pathParams: ['datasetId', 'projectId', 'tableId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    bigquery_v2.Resource$Tables = Resource$Tables;\n})(bigquery_v2 = exports.bigquery_v2 || (exports.bigquery_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}