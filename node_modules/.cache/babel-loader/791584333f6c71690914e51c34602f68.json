{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sqladmin_v1beta4 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar sqladmin_v1beta4;\n\n(function (sqladmin_v1beta4) {\n  /**\n   * Cloud SQL Admin API\n   *\n   * API for Cloud SQL database instance management\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const sqladmin = google.sqladmin('v1beta4');\n   * ```\n   */\n  class Sqladmin {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.backupRuns = new Resource$Backupruns(this.context);\n      this.connect = new Resource$Connect(this.context);\n      this.databases = new Resource$Databases(this.context);\n      this.flags = new Resource$Flags(this.context);\n      this.instances = new Resource$Instances(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.sslCerts = new Resource$Sslcerts(this.context);\n      this.tiers = new Resource$Tiers(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  sqladmin_v1beta4.Sqladmin = Sqladmin;\n\n  class Resource$Backupruns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'id'],\n        pathParams: ['id', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'id'],\n        pathParams: ['id', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Backupruns = Resource$Backupruns;\n\n  class Resource$Connect {\n    constructor(context) {\n      this.context = context;\n    }\n\n    generateEphemeralCert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}:generateEphemeralCert').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/connectSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Connect = Resource$Connect;\n\n  class Resource$Databases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Databases = Resource$Databases;\n\n  class Resource$Flags {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Flags = Resource$Flags;\n\n  class Resource$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    clone(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    failover(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/failover').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    restart(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    startReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Instances = Resource$Instances;\n\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Operations = Resource$Operations;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.instances = new Resource$Projects$Instances(this.context);\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    rescheduleMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    startExternalSync(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    verifyExternalSyncSettings(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Projects$Instances = Resource$Projects$Instances;\n\n  class Resource$Sslcerts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n\n  class Resource$Tiers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Tiers = Resource$Tiers;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Users = Resource$Users;\n})(sqladmin_v1beta4 = exports.sqladmin_v1beta4 || (exports.sqladmin_v1beta4 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/sqladmin/v1beta4.js"],"names":["Object","defineProperty","exports","value","sqladmin_v1beta4","googleapis_common_1","require","Sqladmin","constructor","options","google","context","_options","backupRuns","Resource$Backupruns","connect","Resource$Connect","databases","Resource$Databases","flags","Resource$Flags","instances","Resource$Instances","operations","Resource$Operations","projects","Resource$Projects","sslCerts","Resource$Sslcerts","tiers","Resource$Tiers","users","Resource$Users","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","insert","list","generateEphemeralCert","patch","update","addServerCa","clone","demoteMaster","export","failover","import","listServerCas","promoteReplica","resetSslConfig","restart","restoreBackup","rotateServerCa","startReplica","stopReplica","truncateLog","Resource$Projects$Instances","rescheduleMaintenance","startExternalSync","verifyExternalSyncSettings","createEphemeral"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sqladmin_v1beta4 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar sqladmin_v1beta4;\n(function (sqladmin_v1beta4) {\n    /**\n     * Cloud SQL Admin API\n     *\n     * API for Cloud SQL database instance management\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const sqladmin = google.sqladmin('v1beta4');\n     * ```\n     */\n    class Sqladmin {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.backupRuns = new Resource$Backupruns(this.context);\n            this.connect = new Resource$Connect(this.context);\n            this.databases = new Resource$Databases(this.context);\n            this.flags = new Resource$Flags(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.sslCerts = new Resource$Sslcerts(this.context);\n            this.tiers = new Resource$Tiers(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    sqladmin_v1beta4.Sqladmin = Sqladmin;\n    class Resource$Backupruns {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Backupruns = Resource$Backupruns;\n    class Resource$Connect {\n        constructor(context) {\n            this.context = context;\n        }\n        generateEphemeralCert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}:generateEphemeralCert').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/connectSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Connect = Resource$Connect;\n    class Resource$Databases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Databases = Resource$Databases;\n    class Resource$Flags {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Flags = Resource$Flags;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clone(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        failover(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/failover').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restart(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Instances = Resource$Instances;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Operations = Resource$Operations;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.instances = new Resource$Projects$Instances(this.context);\n        }\n    }\n    sqladmin_v1beta4.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        rescheduleMaintenance(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/rescheduleMaintenance').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startExternalSync(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/startExternalSync').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        verifyExternalSyncSettings(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/verifyExternalSyncSettings').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Projects$Instances = Resource$Projects$Instances;\n    class Resource$Sslcerts {\n        constructor(context) {\n            this.context = context;\n        }\n        createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n    class Resource$Tiers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Tiers = Resource$Tiers;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://sqladmin.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT',\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Users = Resource$Users;\n})(sqladmin_v1beta4 = exports.sqladmin_v1beta4 || (exports.sqladmin_v1beta4 = {}));\n"]},"metadata":{},"sourceType":"script"}