{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar sqladmin_v1beta4;\n\n(function (sqladmin_v1beta4) {\n  /**\n   * Cloud SQL Admin API\n   *\n   * Creates and manages Cloud SQL instances, which provide fully managed MySQL\n   * or PostgreSQL databases.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const sqladmin = google.sqladmin('v1beta4');\n   *\n   * @namespace sqladmin\n   * @type {Function}\n   * @version v1beta4\n   * @variation v1beta4\n   * @param {object=} options Options for Sqladmin\n   */\n  class Sqladmin {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.backupRuns = new Resource$Backupruns(this.context);\n      this.databases = new Resource$Databases(this.context);\n      this.flags = new Resource$Flags(this.context);\n      this.instances = new Resource$Instances(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.sslCerts = new Resource$Sslcerts(this.context);\n      this.tiers = new Resource$Tiers(this.context);\n      this.users = new Resource$Users(this.context);\n    }\n\n  }\n\n  sqladmin_v1beta4.Sqladmin = Sqladmin;\n\n  class Resource$Backupruns {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'id'],\n        pathParams: ['id', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'id'],\n        pathParams: ['id', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Backupruns = Resource$Backupruns;\n\n  class Resource$Databases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'database'],\n        pathParams: ['database', 'instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Databases = Resource$Databases;\n\n  class Resource$Flags {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/flags').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: [],\n        pathParams: [],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Flags = Resource$Flags;\n\n  class Resource$Instances {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    clone(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/clone').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    export(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/export').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    failover(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/failover').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    import(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    restart(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restart').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    startReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Instances = Resource$Instances;\n\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'operation'],\n        pathParams: ['operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Operations = Resource$Operations;\n\n  class Resource$Sslcerts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n        pathParams: ['instance', 'project', 'sha1Fingerprint'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n\n  class Resource$Tiers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Tiers = Resource$Tiers;\n\n  class Resource$Users {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'host', 'name'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/users').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'instance', 'name'],\n        pathParams: ['instance', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  sqladmin_v1beta4.Resource$Users = Resource$Users;\n})(sqladmin_v1beta4 = exports.sqladmin_v1beta4 || (exports.sqladmin_v1beta4 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/sqladmin/v1beta4.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","sqladmin_v1beta4","Sqladmin","constructor","options","google","context","_options","backupRuns","Resource$Backupruns","databases","Resource$Databases","flags","Resource$Flags","instances","Resource$Instances","operations","Resource$Operations","sslCerts","Resource$Sslcerts","tiers","Resource$Tiers","users","Resource$Users","delete","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","insert","list","patch","update","addServerCa","clone","demoteMaster","export","failover","import","listServerCas","promoteReplica","resetSslConfig","restart","restoreBackup","rotateServerCa","startReplica","stopReplica","truncateLog","createEphemeral"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar sqladmin_v1beta4;\n(function (sqladmin_v1beta4) {\n    /**\n     * Cloud SQL Admin API\n     *\n     * Creates and manages Cloud SQL instances, which provide fully managed MySQL\n     * or PostgreSQL databases.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const sqladmin = google.sqladmin('v1beta4');\n     *\n     * @namespace sqladmin\n     * @type {Function}\n     * @version v1beta4\n     * @variation v1beta4\n     * @param {object=} options Options for Sqladmin\n     */\n    class Sqladmin {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.backupRuns = new Resource$Backupruns(this.context);\n            this.databases = new Resource$Databases(this.context);\n            this.flags = new Resource$Flags(this.context);\n            this.instances = new Resource$Instances(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.sslCerts = new Resource$Sslcerts(this.context);\n            this.tiers = new Resource$Tiers(this.context);\n            this.users = new Resource$Users(this.context);\n        }\n    }\n    sqladmin_v1beta4.Sqladmin = Sqladmin;\n    class Resource$Backupruns {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns/{id}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'id'],\n                pathParams: ['id', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/backupRuns')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Backupruns = Resource$Backupruns;\n    class Resource$Databases {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/databases/{database}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'database'],\n                pathParams: ['database', 'instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Databases = Resource$Databases;\n    class Resource$Flags {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/flags')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: [],\n                pathParams: [],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Flags = Resource$Flags;\n    class Resource$Instances {\n        constructor(context) {\n            this.context = context;\n        }\n        addServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/addServerCa')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        clone(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/clone')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        demoteMaster(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/demoteMaster')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        export(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/export')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        failover(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/failover')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        import(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = { options: Object.assign({ url: (rootUrl + '/sql/v1beta4/projects/{project}/instances/{instance}/import').replace(/([^:]\\/)\\/+/g, '$1'), method: 'POST' }, options), params, requiredParams: ['project', 'instance'], pathParams: ['instance', 'project'], context: this.context };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/instances')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        listServerCas(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/listServerCas')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        promoteReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/promoteReplica')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        resetSslConfig(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/resetSslConfig')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restart(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restart')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        restoreBackup(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/restoreBackup')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        rotateServerCa(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/rotateServerCa')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        startReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/startReplica')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        stopReplica(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/stopReplica')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        truncateLog(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/truncateLog')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Instances = Resource$Instances;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'operation'],\n                pathParams: ['operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Operations = Resource$Operations;\n    class Resource$Sslcerts {\n        constructor(context) {\n            this.context = context;\n        }\n        createEphemeral(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'sha1Fingerprint'],\n                pathParams: ['instance', 'project', 'sha1Fingerprint'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Sslcerts = Resource$Sslcerts;\n    class Resource$Tiers {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/sql/v1beta4/projects/{project}/tiers')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Tiers = Resource$Tiers;\n    class Resource$Users {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'host', 'name'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/sql/v1beta4/projects/{project}/instances/{instance}/users')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'instance', 'name'],\n                pathParams: ['instance', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    sqladmin_v1beta4.Resource$Users = Resource$Users;\n})(sqladmin_v1beta4 = exports.sqladmin_v1beta4 || (exports.sqladmin_v1beta4 = {}));\n//# sourceMappingURL=v1beta4.js.map"]},"metadata":{},"sourceType":"script"}