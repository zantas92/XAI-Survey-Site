{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar androidpublisher_v2;\n\n(function (androidpublisher_v2) {\n  /**\n   * Google Play Developer API\n   *\n   * Accesses Android application developers&#39; Google Play accounts.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const androidpublisher = google.androidpublisher('v2');\n   *\n   * @namespace androidpublisher\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Androidpublisher\n   */\n  class Androidpublisher {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.edits = new Resource$Edits(this.context);\n      this.inappproducts = new Resource$Inappproducts(this.context);\n      this.orders = new Resource$Orders(this.context);\n      this.purchases = new Resource$Purchases(this.context);\n      this.reviews = new Resource$Reviews(this.context);\n    }\n\n  }\n\n  androidpublisher_v2.Androidpublisher = Androidpublisher;\n\n  class Resource$Edits {\n    constructor(context) {\n      this.context = context;\n      this.apklistings = new Resource$Edits$Apklistings(this.context);\n      this.apks = new Resource$Edits$Apks(this.context);\n      this.bundles = new Resource$Edits$Bundles(this.context);\n      this.deobfuscationfiles = new Resource$Edits$Deobfuscationfiles(this.context);\n      this.details = new Resource$Edits$Details(this.context);\n      this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n      this.images = new Resource$Edits$Images(this.context);\n      this.listings = new Resource$Edits$Listings(this.context);\n      this.testers = new Resource$Edits$Testers(this.context);\n      this.tracks = new Resource$Edits$Tracks(this.context);\n    }\n\n    commit(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}:commit').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    validate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}:validate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits = Resource$Edits;\n\n  class Resource$Edits$Apklistings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n        pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n        pathParams: ['apkVersionCode', 'editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n        pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n        pathParams: ['apkVersionCode', 'editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n        pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n        pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Apklistings = Resource$Edits$Apklistings;\n\n  class Resource$Edits$Apks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/externallyHosted').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Apks = Resource$Edits$Apks;\n\n  class Resource$Edits$Bundles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Bundles = Resource$Edits$Bundles;\n\n  class Resource$Edits$Deobfuscationfiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'deobfuscationFileType'],\n        pathParams: ['apkVersionCode', 'deobfuscationFileType', 'editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n\n  class Resource$Edits$Details {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Details = Resource$Edits$Details;\n\n  class Resource$Edits$Expansionfiles {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n        pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n\n  class Resource$Edits$Images {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType', 'imageId'],\n        pathParams: ['editId', 'imageId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    upload(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        mediaUrl: (rootUrl + '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}').replace(/([^:]\\/)\\/+/g, '$1'),\n        requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n        pathParams: ['editId', 'imageType', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Images = Resource$Edits$Images;\n\n  class Resource$Edits$Listings {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    deleteall(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'language'],\n        pathParams: ['editId', 'language', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Listings = Resource$Edits$Listings;\n\n  class Resource$Edits$Testers {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Testers = Resource$Edits$Testers;\n\n  class Resource$Edits$Tracks {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId'],\n        pathParams: ['editId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'editId', 'track'],\n        pathParams: ['editId', 'packageName', 'track'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Edits$Tracks = Resource$Edits$Tracks;\n\n  class Resource$Inappproducts {\n    constructor(context) {\n      this.context = context;\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    insert(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'sku'],\n        pathParams: ['packageName', 'sku'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Inappproducts = Resource$Inappproducts;\n\n  class Resource$Orders {\n    constructor(context) {\n      this.context = context;\n    }\n\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/orders/{orderId}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'orderId'],\n        pathParams: ['orderId', 'packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Orders = Resource$Orders;\n\n  class Resource$Purchases {\n    constructor(context) {\n      this.context = context;\n      this.products = new Resource$Purchases$Products(this.context);\n      this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n      this.voidedpurchases = new Resource$Purchases$Voidedpurchases(this.context);\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Purchases = Resource$Purchases;\n\n  class Resource$Purchases$Products {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/products/{productId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'productId', 'token'],\n        pathParams: ['packageName', 'productId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Purchases$Products = Resource$Purchases$Products;\n\n  class Resource$Purchases$Subscriptions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    defer(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    refund(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    revoke(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'subscriptionId', 'token'],\n        pathParams: ['packageName', 'subscriptionId', 'token'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n\n  class Resource$Purchases$Voidedpurchases {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/purchases/voidedpurchases').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n\n  class Resource$Reviews {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/reviews').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['packageName'],\n        pathParams: ['packageName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    reply(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}:reply').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['packageName', 'reviewId'],\n        pathParams: ['packageName', 'reviewId'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  androidpublisher_v2.Resource$Reviews = Resource$Reviews;\n})(androidpublisher_v2 = exports.androidpublisher_v2 || (exports.androidpublisher_v2 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/androidpublisher/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","androidpublisher_v2","Androidpublisher","constructor","options","google","context","_options","edits","Resource$Edits","inappproducts","Resource$Inappproducts","orders","Resource$Orders","purchases","Resource$Purchases","reviews","Resource$Reviews","apklistings","Resource$Edits$Apklistings","apks","Resource$Edits$Apks","bundles","Resource$Edits$Bundles","deobfuscationfiles","Resource$Edits$Deobfuscationfiles","details","Resource$Edits$Details","expansionfiles","Resource$Edits$Expansionfiles","images","Resource$Edits$Images","listings","Resource$Edits$Listings","testers","Resource$Edits$Testers","tracks","Resource$Edits$Tracks","commit","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","delete","get","insert","validate","deleteall","list","patch","update","addexternallyhosted","upload","mediaUrl","refund","products","Resource$Purchases$Products","subscriptions","Resource$Purchases$Subscriptions","voidedpurchases","Resource$Purchases$Voidedpurchases","cancel","defer","revoke","reply"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar androidpublisher_v2;\n(function (androidpublisher_v2) {\n    /**\n     * Google Play Developer API\n     *\n     * Accesses Android application developers&#39; Google Play accounts.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const androidpublisher = google.androidpublisher('v2');\n     *\n     * @namespace androidpublisher\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Androidpublisher\n     */\n    class Androidpublisher {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.edits = new Resource$Edits(this.context);\n            this.inappproducts = new Resource$Inappproducts(this.context);\n            this.orders = new Resource$Orders(this.context);\n            this.purchases = new Resource$Purchases(this.context);\n            this.reviews = new Resource$Reviews(this.context);\n        }\n    }\n    androidpublisher_v2.Androidpublisher = Androidpublisher;\n    class Resource$Edits {\n        constructor(context) {\n            this.context = context;\n            this.apklistings = new Resource$Edits$Apklistings(this.context);\n            this.apks = new Resource$Edits$Apks(this.context);\n            this.bundles = new Resource$Edits$Bundles(this.context);\n            this.deobfuscationfiles =\n                new Resource$Edits$Deobfuscationfiles(this.context);\n            this.details = new Resource$Edits$Details(this.context);\n            this.expansionfiles = new Resource$Edits$Expansionfiles(this.context);\n            this.images = new Resource$Edits$Images(this.context);\n            this.listings = new Resource$Edits$Listings(this.context);\n            this.testers = new Resource$Edits$Testers(this.context);\n            this.tracks = new Resource$Edits$Tracks(this.context);\n        }\n        commit(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}:commit')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        validate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}:validate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits = Resource$Edits;\n    class Resource$Edits$Apklistings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n                pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n                pathParams: ['apkVersionCode', 'editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n                pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode'],\n                pathParams: ['apkVersionCode', 'editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n                pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'language'],\n                pathParams: ['apkVersionCode', 'editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Apklistings = Resource$Edits$Apklistings;\n    class Resource$Edits$Apks {\n        constructor(context) {\n            this.context = context;\n        }\n        addexternallyhosted(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/externallyHosted')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Apks = Resource$Edits$Apks;\n    class Resource$Edits$Bundles {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/bundles')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Bundles = Resource$Edits$Bundles;\n    class Resource$Edits$Deobfuscationfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/deobfuscationFiles/{deobfuscationFileType}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: [\n                    'packageName', 'editId', 'apkVersionCode', 'deobfuscationFileType'\n                ],\n                pathParams: [\n                    'apkVersionCode', 'deobfuscationFileType', 'editId', 'packageName'\n                ],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Deobfuscationfiles = Resource$Edits$Deobfuscationfiles;\n    class Resource$Edits$Details {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/details')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Details = Resource$Edits$Details;\n    class Resource$Edits$Expansionfiles {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n                pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n                pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n                pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/apks/{apkVersionCode}/expansionFiles/{expansionFileType}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId', 'apkVersionCode', 'expansionFileType'],\n                pathParams: ['apkVersionCode', 'editId', 'expansionFileType', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Expansionfiles = Resource$Edits$Expansionfiles;\n    class Resource$Edits$Images {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}/{imageId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType', 'imageId'],\n                pathParams: ['editId', 'imageId', 'imageType', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        upload(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                mediaUrl: (rootUrl +\n                    '/upload/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}/{imageType}')\n                    .replace(/([^:]\\/)\\/+/g, '$1'),\n                requiredParams: ['packageName', 'editId', 'language', 'imageType'],\n                pathParams: ['editId', 'imageType', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Images = Resource$Edits$Images;\n    class Resource$Edits$Listings {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        deleteall(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/listings/{language}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'language'],\n                pathParams: ['editId', 'language', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Listings = Resource$Edits$Listings;\n    class Resource$Edits$Testers {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/testers/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Testers = Resource$Edits$Testers;\n    class Resource$Edits$Tracks {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId'],\n                pathParams: ['editId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/edits/{editId}/tracks/{track}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'editId', 'track'],\n                pathParams: ['editId', 'packageName', 'track'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Edits$Tracks = Resource$Edits$Tracks;\n    class Resource$Inappproducts {\n        constructor(context) {\n            this.context = context;\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        insert(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/inappproducts/{sku}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'sku'],\n                pathParams: ['packageName', 'sku'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Inappproducts = Resource$Inappproducts;\n    class Resource$Orders {\n        constructor(context) {\n            this.context = context;\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/orders/{orderId}:refund')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'orderId'],\n                pathParams: ['orderId', 'packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Orders = Resource$Orders;\n    class Resource$Purchases {\n        constructor(context) {\n            this.context = context;\n            this.products = new Resource$Purchases$Products(this.context);\n            this.subscriptions = new Resource$Purchases$Subscriptions(this.context);\n            this.voidedpurchases =\n                new Resource$Purchases$Voidedpurchases(this.context);\n        }\n    }\n    androidpublisher_v2.Resource$Purchases = Resource$Purchases;\n    class Resource$Purchases$Products {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/products/{productId}/tokens/{token}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'productId', 'token'],\n                pathParams: ['packageName', 'productId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Purchases$Products = Resource$Purchases$Products;\n    class Resource$Purchases$Subscriptions {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:cancel')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        defer(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:defer')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        refund(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:refund')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        revoke(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/subscriptions/{subscriptionId}/tokens/{token}:revoke')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'subscriptionId', 'token'],\n                pathParams: ['packageName', 'subscriptionId', 'token'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Purchases$Subscriptions = Resource$Purchases$Subscriptions;\n    class Resource$Purchases$Voidedpurchases {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/purchases/voidedpurchases')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Purchases$Voidedpurchases = Resource$Purchases$Voidedpurchases;\n    class Resource$Reviews {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/reviews')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['packageName'],\n                pathParams: ['packageName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        reply(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/androidpublisher/v2/applications/{packageName}/reviews/{reviewId}:reply')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['packageName', 'reviewId'],\n                pathParams: ['packageName', 'reviewId'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    androidpublisher_v2.Resource$Reviews = Resource$Reviews;\n})(androidpublisher_v2 = exports.androidpublisher_v2 || (exports.androidpublisher_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}