{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar dns_v1beta2;\n\n(function (dns_v1beta2) {\n  /**\n   * Google Cloud DNS API\n   *\n   * Configures and serves authoritative DNS records.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const dns = google.dns('v1beta2');\n   *\n   * @namespace dns\n   * @type {Function}\n   * @version v1beta2\n   * @variation v1beta2\n   * @param {object=} options Options for Dns\n   */\n  class Dns {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.changes = new Resource$Changes(this.context);\n      this.dnsKeys = new Resource$Dnskeys(this.context);\n      this.managedZoneOperations = new Resource$Managedzoneoperations(this.context);\n      this.managedZones = new Resource$Managedzones(this.context);\n      this.policies = new Resource$Policies(this.context);\n      this.projects = new Resource$Projects(this.context);\n      this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n    }\n\n  }\n\n  dns_v1beta2.Dns = Dns;\n\n  class Resource$Changes {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes/{changeId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone', 'changeId'],\n        pathParams: ['changeId', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Changes = Resource$Changes;\n\n  class Resource$Dnskeys {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n        pathParams: ['dnsKeyId', 'managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Dnskeys = Resource$Dnskeys;\n\n  class Resource$Managedzoneoperations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations/{operation}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone', 'operation'],\n        pathParams: ['managedZone', 'operation', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n\n  class Resource$Managedzones {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Managedzones = Resource$Managedzones;\n\n  class Resource$Policies {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['project', 'policy'],\n        pathParams: ['policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'policy'],\n        pathParams: ['policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['project', 'policy'],\n        pathParams: ['policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/policies/{policy}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['project', 'policy'],\n        pathParams: ['policy', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Policies = Resource$Policies;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project'],\n        pathParams: ['project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Projects = Resource$Projects;\n\n  class Resource$Resourcerecordsets {\n    constructor(context) {\n      this.context = context;\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['project', 'managedZone'],\n        pathParams: ['managedZone', 'project'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  dns_v1beta2.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1beta2 = exports.dns_v1beta2 || (exports.dns_v1beta2 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/dns/v1beta2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","dns_v1beta2","Dns","constructor","options","google","context","_options","changes","Resource$Changes","dnsKeys","Resource$Dnskeys","managedZoneOperations","Resource$Managedzoneoperations","managedZones","Resource$Managedzones","policies","Resource$Policies","projects","Resource$Projects","resourceRecordSets","Resource$Resourcerecordsets","create","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","get","list","delete","patch","update"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar dns_v1beta2;\n(function (dns_v1beta2) {\n    /**\n     * Google Cloud DNS API\n     *\n     * Configures and serves authoritative DNS records.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const dns = google.dns('v1beta2');\n     *\n     * @namespace dns\n     * @type {Function}\n     * @version v1beta2\n     * @variation v1beta2\n     * @param {object=} options Options for Dns\n     */\n    class Dns {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.changes = new Resource$Changes(this.context);\n            this.dnsKeys = new Resource$Dnskeys(this.context);\n            this.managedZoneOperations =\n                new Resource$Managedzoneoperations(this.context);\n            this.managedZones = new Resource$Managedzones(this.context);\n            this.policies = new Resource$Policies(this.context);\n            this.projects = new Resource$Projects(this.context);\n            this.resourceRecordSets = new Resource$Resourcerecordsets(this.context);\n        }\n    }\n    dns_v1beta2.Dns = Dns;\n    class Resource$Changes {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes/{changeId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'changeId'],\n                pathParams: ['changeId', 'managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/changes')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Changes = Resource$Changes;\n    class Resource$Dnskeys {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'dnsKeyId'],\n                pathParams: ['dnsKeyId', 'managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/dnsKeys')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Dnskeys = Resource$Dnskeys;\n    class Resource$Managedzoneoperations {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations/{operation}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone', 'operation'],\n                pathParams: ['managedZone', 'operation', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/operations')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Managedzoneoperations = Resource$Managedzoneoperations;\n    class Resource$Managedzones {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1beta2/projects/{project}/managedZones')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Managedzones = Resource$Managedzones;\n    class Resource$Policies {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1beta2/projects/{project}/policies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/policies/{policy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE'\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/policies/{policy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1beta2/projects/{project}/policies')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/policies/{policy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH'\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/policies/{policy}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['project', 'policy'],\n                pathParams: ['policy', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Policies = Resource$Policies;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/dns/v1beta2/projects/{project}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project'],\n                pathParams: ['project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Projects = Resource$Projects;\n    class Resource$Resourcerecordsets {\n        constructor(context) {\n            this.context = context;\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://www.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/dns/v1beta2/projects/{project}/managedZones/{managedZone}/rrsets')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['project', 'managedZone'],\n                pathParams: ['managedZone', 'project'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    dns_v1beta2.Resource$Resourcerecordsets = Resource$Resourcerecordsets;\n})(dns_v1beta2 = exports.dns_v1beta2 || (exports.dns_v1beta2 = {}));\n//# sourceMappingURL=v1beta2.js.map"]},"metadata":{},"sourceType":"script"}