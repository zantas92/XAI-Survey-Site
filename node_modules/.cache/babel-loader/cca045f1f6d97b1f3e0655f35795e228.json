{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gtoken_1 = require(\"gtoken\");\n\nconst messages = require(\"../messages\");\n\nconst jwtaccess_1 = require(\"./jwtaccess\");\n\nconst oauth2client_1 = require(\"./oauth2client\");\n\nclass JWT extends oauth2client_1.OAuth2Client {\n  constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n    const opts = optionsOrEmail && typeof optionsOrEmail === 'object' ? optionsOrEmail : {\n      email: optionsOrEmail,\n      keyFile,\n      key,\n      keyId,\n      scopes,\n      subject\n    };\n    super({\n      eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis\n    });\n    this.email = opts.email;\n    this.keyFile = opts.keyFile;\n    this.key = opts.key;\n    this.keyId = opts.keyId;\n    this.scopes = opts.scopes;\n    this.subject = opts.subject;\n    this.additionalClaims = opts.additionalClaims;\n    this.credentials = {\n      refresh_token: 'jwt-placeholder',\n      expiry_date: 1\n    };\n  }\n  /**\n   * Creates a copy of the credential with the specified scopes.\n   * @param scopes List of requested scopes or a single scope.\n   * @return The cloned instance.\n   */\n\n\n  createScoped(scopes) {\n    return new JWT({\n      email: this.email,\n      keyFile: this.keyFile,\n      key: this.key,\n      keyId: this.keyId,\n      scopes,\n      subject: this.subject,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Obtains the metadata to be sent with the request.\n   *\n   * @param url the URI being authorized.\n   */\n\n\n  getRequestMetadataAsync(url) {\n    const _super = Object.create(null, {\n      getRequestMetadataAsync: {\n        get: () => super.getRequestMetadataAsync\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      if (!this.apiKey && !this.hasScopes() && url) {\n        if (this.additionalClaims && this.additionalClaims.target_audience) {\n          const {\n            tokens\n          } = yield this.refreshToken();\n          return {\n            headers: {\n              Authorization: `Bearer ${tokens.id_token}`\n            }\n          };\n        } else {\n          // no scopes have been set, but a uri has been provided. Use JWTAccess\n          // credentials.\n          if (!this.access) {\n            this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n          }\n\n          const headers = yield this.access.getRequestHeaders(url, this.additionalClaims);\n          return {\n            headers\n          };\n        }\n      } else {\n        return _super.getRequestMetadataAsync.call(this, url);\n      }\n    });\n  }\n  /**\n   * Indicates whether the credential requires scopes to be created by calling\n   * createScoped before use.\n   * @deprecated\n   * @return false if createScoped does not need to be called.\n   */\n\n\n  createScopedRequired() {\n    messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n    return !this.hasScopes();\n  }\n  /**\n   * Determine if there are currently scopes available.\n   */\n\n\n  hasScopes() {\n    if (!this.scopes) {\n      return false;\n    } // For arrays, check the array length.\n\n\n    if (this.scopes instanceof Array) {\n      return this.scopes.length > 0;\n    } // For others, convert to a string and check the length.\n\n\n    return String(this.scopes).length > 0;\n  }\n\n  authorize(callback) {\n    if (callback) {\n      this.authorizeAsync().then(r => callback(null, r), callback);\n    } else {\n      return this.authorizeAsync();\n    }\n  }\n\n  authorizeAsync() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const result = yield this.refreshToken();\n\n      if (!result) {\n        throw new Error('No result returned');\n      }\n\n      this.credentials = result.tokens;\n      this.credentials.refresh_token = 'jwt-placeholder';\n      this.key = this.gtoken.key;\n      this.email = this.gtoken.iss;\n      return result.tokens;\n    });\n  }\n  /**\n   * Refreshes the access token.\n   * @param refreshToken ignored\n   * @private\n   */\n\n\n  refreshTokenNoCache(refreshToken) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const gtoken = this.createGToken();\n      const token = yield gtoken.getToken();\n      const tokens = {\n        access_token: token,\n        token_type: 'Bearer',\n        expiry_date: gtoken.expiresAt,\n        // tslint:disable-next-line no-any\n        id_token: gtoken.rawToken.id_token\n      };\n      this.emit('tokens', tokens);\n      return {\n        res: null,\n        tokens\n      };\n    });\n  }\n  /**\n   * Create a gToken if it doesn't already exist.\n   */\n\n\n  createGToken() {\n    if (!this.gtoken) {\n      this.gtoken = new gtoken_1.GoogleToken({\n        iss: this.email,\n        sub: this.subject,\n        scope: this.scopes,\n        keyFile: this.keyFile,\n        key: this.key,\n        additionalClaims: this.additionalClaims\n      });\n    }\n\n    return this.gtoken;\n  }\n  /**\n   * Create a JWT credentials instance using the given input options.\n   * @param json The input object.\n   */\n\n\n  fromJSON(json) {\n    if (!json) {\n      throw new Error('Must pass in a JSON object containing the service account auth settings.');\n    }\n\n    if (!json.client_email) {\n      throw new Error('The incoming JSON object does not contain a client_email field');\n    }\n\n    if (!json.private_key) {\n      throw new Error('The incoming JSON object does not contain a private_key field');\n    } // Extract the relevant information from the json key file.\n\n\n    this.email = json.client_email;\n    this.key = json.private_key;\n    this.keyId = json.private_key_id;\n    this.projectId = json.project_id;\n  }\n\n  fromStream(inputStream, callback) {\n    if (callback) {\n      this.fromStreamAsync(inputStream).then(r => callback(), callback);\n    } else {\n      return this.fromStreamAsync(inputStream);\n    }\n  }\n\n  fromStreamAsync(inputStream) {\n    return new Promise((resolve, reject) => {\n      if (!inputStream) {\n        throw new Error('Must pass in a stream containing the service account auth settings.');\n      }\n\n      let s = '';\n      inputStream.setEncoding('utf8').on('error', reject).on('data', chunk => s += chunk).on('end', () => {\n        try {\n          const data = JSON.parse(s);\n          this.fromJSON(data);\n          resolve();\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });\n  }\n  /**\n   * Creates a JWT credentials instance using an API Key for authentication.\n   * @param apiKey The API Key in string form.\n   */\n\n\n  fromAPIKey(apiKey) {\n    if (typeof apiKey !== 'string') {\n      throw new Error('Must provide an API Key string.');\n    }\n\n    this.apiKey = apiKey;\n  }\n  /**\n   * Using the key or keyFile on the JWT client, obtain an object that contains\n   * the key and the client email.\n   */\n\n\n  getCredentials() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.key) {\n        return {\n          private_key: this.key,\n          client_email: this.email\n        };\n      } else if (this.keyFile) {\n        const gtoken = this.createGToken();\n        const creds = yield gtoken.getCredentials(this.keyFile);\n        return {\n          private_key: creds.privateKey,\n          client_email: creds.clientEmail\n        };\n      }\n\n      throw new Error('A key or a keyFile must be provided to getCredentials.');\n    });\n  }\n\n}\n\nexports.JWT = JWT;","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enk√§t/Release/xai-survey-app/node_modules/googleapis-common/node_modules/google-auth-library/build/src/auth/jwtclient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","gtoken_1","require","messages","jwtaccess_1","oauth2client_1","JWT","OAuth2Client","constructor","optionsOrEmail","keyFile","key","scopes","subject","keyId","opts","email","eagerRefreshThresholdMillis","additionalClaims","credentials","refresh_token","expiry_date","createScoped","getRequestMetadataAsync","url","_super","create","get","apiKey","hasScopes","target_audience","tokens","refreshToken","headers","Authorization","id_token","access","JWTAccess","getRequestHeaders","call","createScopedRequired","warn","JWT_CREATE_SCOPED_DEPRECATED","Array","length","String","authorize","callback","authorizeAsync","r","Error","gtoken","iss","refreshTokenNoCache","createGToken","token","getToken","access_token","token_type","expiresAt","rawToken","emit","res","GoogleToken","sub","scope","fromJSON","json","client_email","private_key","private_key_id","projectId","project_id","fromStream","inputStream","fromStreamAsync","s","setEncoding","on","chunk","data","JSON","parse","fromAPIKey","getCredentials","creds","privateKey","clientEmail"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2013 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst gtoken_1 = require(\"gtoken\");\nconst messages = require(\"../messages\");\nconst jwtaccess_1 = require(\"./jwtaccess\");\nconst oauth2client_1 = require(\"./oauth2client\");\nclass JWT extends oauth2client_1.OAuth2Client {\n    constructor(optionsOrEmail, keyFile, key, scopes, subject, keyId) {\n        const opts = (optionsOrEmail && typeof optionsOrEmail === 'object') ?\n            optionsOrEmail :\n            { email: optionsOrEmail, keyFile, key, keyId, scopes, subject };\n        super({ eagerRefreshThresholdMillis: opts.eagerRefreshThresholdMillis });\n        this.email = opts.email;\n        this.keyFile = opts.keyFile;\n        this.key = opts.key;\n        this.keyId = opts.keyId;\n        this.scopes = opts.scopes;\n        this.subject = opts.subject;\n        this.additionalClaims = opts.additionalClaims;\n        this.credentials = { refresh_token: 'jwt-placeholder', expiry_date: 1 };\n    }\n    /**\n     * Creates a copy of the credential with the specified scopes.\n     * @param scopes List of requested scopes or a single scope.\n     * @return The cloned instance.\n     */\n    createScoped(scopes) {\n        return new JWT({\n            email: this.email,\n            keyFile: this.keyFile,\n            key: this.key,\n            keyId: this.keyId,\n            scopes,\n            subject: this.subject,\n            additionalClaims: this.additionalClaims\n        });\n    }\n    /**\n     * Obtains the metadata to be sent with the request.\n     *\n     * @param url the URI being authorized.\n     */\n    getRequestMetadataAsync(url) {\n        const _super = Object.create(null, {\n            getRequestMetadataAsync: { get: () => super.getRequestMetadataAsync }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.apiKey && !this.hasScopes() && url) {\n                if (this.additionalClaims && this.additionalClaims.target_audience) {\n                    const { tokens } = yield this.refreshToken();\n                    return { headers: { Authorization: `Bearer ${tokens.id_token}` } };\n                }\n                else {\n                    // no scopes have been set, but a uri has been provided. Use JWTAccess\n                    // credentials.\n                    if (!this.access) {\n                        this.access = new jwtaccess_1.JWTAccess(this.email, this.key, this.keyId);\n                    }\n                    const headers = yield this.access.getRequestHeaders(url, this.additionalClaims);\n                    return { headers };\n                }\n            }\n            else {\n                return _super.getRequestMetadataAsync.call(this, url);\n            }\n        });\n    }\n    /**\n     * Indicates whether the credential requires scopes to be created by calling\n     * createScoped before use.\n     * @deprecated\n     * @return false if createScoped does not need to be called.\n     */\n    createScopedRequired() {\n        messages.warn(messages.JWT_CREATE_SCOPED_DEPRECATED);\n        return !this.hasScopes();\n    }\n    /**\n     * Determine if there are currently scopes available.\n     */\n    hasScopes() {\n        if (!this.scopes) {\n            return false;\n        }\n        // For arrays, check the array length.\n        if (this.scopes instanceof Array) {\n            return this.scopes.length > 0;\n        }\n        // For others, convert to a string and check the length.\n        return String(this.scopes).length > 0;\n    }\n    authorize(callback) {\n        if (callback) {\n            this.authorizeAsync().then(r => callback(null, r), callback);\n        }\n        else {\n            return this.authorizeAsync();\n        }\n    }\n    authorizeAsync() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield this.refreshToken();\n            if (!result) {\n                throw new Error('No result returned');\n            }\n            this.credentials = result.tokens;\n            this.credentials.refresh_token = 'jwt-placeholder';\n            this.key = this.gtoken.key;\n            this.email = this.gtoken.iss;\n            return result.tokens;\n        });\n    }\n    /**\n     * Refreshes the access token.\n     * @param refreshToken ignored\n     * @private\n     */\n    refreshTokenNoCache(refreshToken) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const gtoken = this.createGToken();\n            const token = yield gtoken.getToken();\n            const tokens = {\n                access_token: token,\n                token_type: 'Bearer',\n                expiry_date: gtoken.expiresAt,\n                // tslint:disable-next-line no-any\n                id_token: gtoken.rawToken.id_token\n            };\n            this.emit('tokens', tokens);\n            return { res: null, tokens };\n        });\n    }\n    /**\n     * Create a gToken if it doesn't already exist.\n     */\n    createGToken() {\n        if (!this.gtoken) {\n            this.gtoken = new gtoken_1.GoogleToken({\n                iss: this.email,\n                sub: this.subject,\n                scope: this.scopes,\n                keyFile: this.keyFile,\n                key: this.key,\n                additionalClaims: this.additionalClaims\n            });\n        }\n        return this.gtoken;\n    }\n    /**\n     * Create a JWT credentials instance using the given input options.\n     * @param json The input object.\n     */\n    fromJSON(json) {\n        if (!json) {\n            throw new Error('Must pass in a JSON object containing the service account auth settings.');\n        }\n        if (!json.client_email) {\n            throw new Error('The incoming JSON object does not contain a client_email field');\n        }\n        if (!json.private_key) {\n            throw new Error('The incoming JSON object does not contain a private_key field');\n        }\n        // Extract the relevant information from the json key file.\n        this.email = json.client_email;\n        this.key = json.private_key;\n        this.keyId = json.private_key_id;\n        this.projectId = json.project_id;\n    }\n    fromStream(inputStream, callback) {\n        if (callback) {\n            this.fromStreamAsync(inputStream).then(r => callback(), callback);\n        }\n        else {\n            return this.fromStreamAsync(inputStream);\n        }\n    }\n    fromStreamAsync(inputStream) {\n        return new Promise((resolve, reject) => {\n            if (!inputStream) {\n                throw new Error('Must pass in a stream containing the service account auth settings.');\n            }\n            let s = '';\n            inputStream.setEncoding('utf8')\n                .on('error', reject)\n                .on('data', (chunk) => s += chunk)\n                .on('end', () => {\n                try {\n                    const data = JSON.parse(s);\n                    this.fromJSON(data);\n                    resolve();\n                }\n                catch (e) {\n                    reject(e);\n                }\n            });\n        });\n    }\n    /**\n     * Creates a JWT credentials instance using an API Key for authentication.\n     * @param apiKey The API Key in string form.\n     */\n    fromAPIKey(apiKey) {\n        if (typeof apiKey !== 'string') {\n            throw new Error('Must provide an API Key string.');\n        }\n        this.apiKey = apiKey;\n    }\n    /**\n     * Using the key or keyFile on the JWT client, obtain an object that contains\n     * the key and the client email.\n     */\n    getCredentials() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.key) {\n                return { private_key: this.key, client_email: this.email };\n            }\n            else if (this.keyFile) {\n                const gtoken = this.createGToken();\n                const creds = yield gtoken.getCredentials(this.keyFile);\n                return { private_key: creds.privateKey, client_email: creds.clientEmail };\n            }\n            throw new Error('A key or a keyFile must be provided to getCredentials.');\n        });\n    }\n}\nexports.JWT = JWT;\n//# sourceMappingURL=jwtclient.js.map"]},"metadata":{},"sourceType":"script"}