{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require(\"json-bigint\");\n\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\n\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  } // If no scheme is provided default to HTTP:\n\n\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n\n  return new URL(exports.BASE_PATH, baseUrl).href;\n} // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nasync function metadataAccessor(type, options) {\n  let noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  let fastFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  options = options || {};\n\n  if (typeof options === 'string') {\n    options = {\n      property: options\n    };\n  }\n\n  let property = '';\n\n  if (typeof options === 'object' && options.property) {\n    property = '/' + options.property;\n  }\n\n  validate(options);\n\n  try {\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const res = await requestMethod({\n      url: `${getBaseUrl()}/${type}${property}`,\n      headers: Object.assign({}, exports.HEADERS, options.headers),\n      retryConfig: {\n        noResponseRetries\n      },\n      params: options.params,\n      responseType: 'text',\n      timeout: requestTimeout()\n    }); // NOTE: node.js converts all incoming headers to lower case.\n\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n      throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n    } else if (!res.data) {\n      throw new Error('Invalid response from the metadata service');\n    }\n\n    if (typeof res.data === 'string') {\n      try {\n        return jsonBigint.parse(res.data);\n      } catch (_a) {\n        /* ignore */\n      }\n    }\n\n    return res.data;\n  } catch (e) {\n    if (e.response && e.response.status !== 200) {\n      e.message = `Unsuccessful response status code. ${e.message}`;\n    }\n\n    throw e;\n  }\n}\n\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = { ...options,\n    url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  }; // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment signficantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Additional logic has been added to make sure that we don't create an\n  // unhandled rejection in scenarios where a failure happens sometime\n  // after a success.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n\n  let responded = false;\n  const r1 = gaxios_1.request(options).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r2;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  const r2 = gaxios_1.request(secondaryOptions).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r1;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\n\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\n\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\n\nasync function isAvailable() {\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (err) {\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && ( // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code;\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      } // Failure to resolve the metadata service means that it is not available.\n\n\n      return false;\n    }\n  }\n}\n\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\n\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * Obtain the timeout for requests to the metadata server.\n */\n\nfunction requestTimeout() {\n  // In testing, we were able to reproduce behavior similar to\n  // https://github.com/googleapis/google-auth-library-nodejs/issues/798\n  // by making many concurrent network requests. Requests do not actually fail,\n  // rather they take significantly longer to complete (and we hit our\n  // default 3000ms timeout).\n  //\n  // This logic detects a GCF environment, using the documented environment\n  // variables K_SERVICE and FUNCTION_NAME:\n  // https://cloud.google.com/functions/docs/env-var and, in a GCF environment\n  // eliminates timeouts (by setting the value to 0 to disable).\n  return process.env.K_SERVICE || process.env.FUNCTION_NAME ? 0 : 3000;\n}\n\nexports.requestTimeout = requestTimeout;","map":{"version":3,"mappings":"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","names":["exports","Object","freeze","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","fastFail","property","requestMethod","fastFailMetadataRequest","gaxios_1","res","url","headers","assign","retryConfig","params","responseType","timeout","requestTimeout","toLowerCase","data","jsonBigint","parse","e","response","status","message","secondaryOptions","replace","responded","r1","then","catch","err","r2","Promise","race","instance","project","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","isAvailable","undefined","DEBUG_AUTH","console","info","code","includes","emitWarning","resetIsAvailableCache","K_SERVICE","FUNCTION_NAME"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}