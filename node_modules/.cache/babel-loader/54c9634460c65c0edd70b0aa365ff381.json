{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.apigateway_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/* eslint-disable @typescript-eslint/class-name-casing */\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable no-irregular-whitespace */\n\nconst googleapis_common_1 = require(\"googleapis-common\");\n\nvar apigateway_v1;\n\n(function (apigateway_v1) {\n  /**\n   * API Gateway API\n   *\n   *\n   *\n   * @example\n   * ```js\n   * const {google} = require('googleapis');\n   * const apigateway = google.apigateway('v1');\n   * ```\n   */\n  class Apigateway {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.projects = new Resource$Projects(this.context);\n    }\n\n  }\n\n  apigateway_v1.Apigateway = Apigateway;\n\n  class Resource$Projects {\n    constructor(context) {\n      this.context = context;\n      this.locations = new Resource$Projects$Locations(this.context);\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects = Resource$Projects;\n\n  class Resource$Projects$Locations {\n    constructor(context) {\n      this.context = context;\n      this.apis = new Resource$Projects$Locations$Apis(this.context);\n      this.gateways = new Resource$Projects$Locations$Gateways(this.context);\n      this.operations = new Resource$Projects$Locations$Operations(this.context);\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n\n  class Resource$Projects$Locations$Apis {\n    constructor(context) {\n      this.context = context;\n      this.configs = new Resource$Projects$Locations$Apis$Configs(this.context);\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects$Locations$Apis = Resource$Projects$Locations$Apis;\n\n  class Resource$Projects$Locations$Apis$Configs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects$Locations$Apis$Configs = Resource$Projects$Locations$Apis$Configs;\n\n  class Resource$Projects$Locations$Gateways {\n    constructor(context) {\n      this.context = context;\n    }\n\n    create(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/gateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+parent}/gateways').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['parent'],\n        pathParams: ['parent'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    patch(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PATCH'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['resource'],\n        pathParams: ['resource'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects$Locations$Gateways = Resource$Projects$Locations$Gateways;\n\n  class Resource$Projects$Locations$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    cancel(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    delete(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'DELETE'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    list(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  apigateway_v1.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n})(apigateway_v1 = exports.apigateway_v1 || (exports.apigateway_v1 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/apigateway/v1.js"],"names":["Object","defineProperty","exports","value","apigateway_v1","googleapis_common_1","require","Apigateway","constructor","options","google","context","_options","projects","Resource$Projects","locations","Resource$Projects$Locations","apis","Resource$Projects$Locations$Apis","gateways","Resource$Projects$Locations$Gateways","operations","Resource$Projects$Locations$Operations","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","list","configs","Resource$Projects$Locations$Apis$Configs","create","delete","getIamPolicy","patch","setIamPolicy","testIamPermissions","cancel"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright 2020 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.apigateway_v1 = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/class-name-casing */\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable no-irregular-whitespace */\nconst googleapis_common_1 = require(\"googleapis-common\");\nvar apigateway_v1;\n(function (apigateway_v1) {\n    /**\n     * API Gateway API\n     *\n     *\n     *\n     * @example\n     * ```js\n     * const {google} = require('googleapis');\n     * const apigateway = google.apigateway('v1');\n     * ```\n     */\n    class Apigateway {\n        constructor(options, google) {\n            this.context = {\n                _options: options || {},\n                google,\n            };\n            this.projects = new Resource$Projects(this.context);\n        }\n    }\n    apigateway_v1.Apigateway = Apigateway;\n    class Resource$Projects {\n        constructor(context) {\n            this.context = context;\n            this.locations = new Resource$Projects$Locations(this.context);\n        }\n    }\n    apigateway_v1.Resource$Projects = Resource$Projects;\n    class Resource$Projects$Locations {\n        constructor(context) {\n            this.context = context;\n            this.apis = new Resource$Projects$Locations$Apis(this.context);\n            this.gateways = new Resource$Projects$Locations$Gateways(this.context);\n            this.operations = new Resource$Projects$Locations$Operations(this.context);\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/locations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    apigateway_v1.Resource$Projects$Locations = Resource$Projects$Locations;\n    class Resource$Projects$Locations$Apis {\n        constructor(context) {\n            this.context = context;\n            this.configs = new Resource$Projects$Locations$Apis$Configs(this.context);\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/apis').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    apigateway_v1.Resource$Projects$Locations$Apis = Resource$Projects$Locations$Apis;\n    class Resource$Projects$Locations$Apis$Configs {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/configs').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    apigateway_v1.Resource$Projects$Locations$Apis$Configs = Resource$Projects$Locations$Apis$Configs;\n    class Resource$Projects$Locations$Gateways {\n        constructor(context) {\n            this.context = context;\n        }\n        create(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/gateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:getIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+parent}/gateways').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['parent'],\n                pathParams: ['parent'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        patch(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PATCH',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        setIamPolicy(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:setIamPolicy').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        testIamPermissions(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params =\n                    {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+resource}:testIamPermissions').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['resource'],\n                pathParams: ['resource'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    apigateway_v1.Resource$Projects$Locations$Gateways = Resource$Projects$Locations$Gateways;\n    class Resource$Projects$Locations$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        cancel(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}:cancel').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        delete(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'DELETE',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        list(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback ||\n                {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://apigateway.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v1/{+name}/operations').replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET',\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context,\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    apigateway_v1.Resource$Projects$Locations$Operations = Resource$Projects$Locations$Operations;\n})(apigateway_v1 = exports.apigateway_v1 || (exports.apigateway_v1 = {}));\n"]},"metadata":{},"sourceType":"script"}