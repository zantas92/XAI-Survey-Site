{"ast":null,"code":"\"use strict\"; // Copyright 2018, Google, LLC.\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction getRetryConfig(err) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let config = getConfig(err);\n\n    if (!err || !err.config || !config && !err.config.retry) {\n      return {\n        shouldRetry: false\n      };\n    }\n\n    config = config || {};\n    config.currentRetryAttempt = config.currentRetryAttempt || 0;\n    config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n    config.retryDelay = config.retryDelay || 100;\n    config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n    config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries; // If this wasn't in the list of status codes where we want\n    // to automatically retry, return.\n\n    const retryRanges = [// https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n    // 1xx - Retry (Informational, request still processing)\n    // 2xx - Do not retry (Success)\n    // 3xx - Do not retry (Redirect)\n    // 4xx - Do not retry (Client errors)\n    // 429 - Retry (\"Too Many Requests\")\n    // 5xx - Retry (Server errors)\n    [100, 199], [429, 429], [500, 599]];\n    config.statusCodesToRetry = config.statusCodesToRetry || retryRanges; // Put the config back into the err\n\n    err.config.retryConfig = config; // Determine if we should retry the request\n\n    const shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n\n    if (!shouldRetryFn(err)) {\n      return {\n        shouldRetry: false,\n        config: err.config\n      };\n    } // Calculate time to wait with exponential backoff.\n    // Formula: (2^c - 1 / 2) * 1000\n\n\n    const delay = (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n\n    err.config.retryConfig.currentRetryAttempt += 1; // Create a promise that invokes the retry after the backOffDelay\n\n    const backoff = new Promise(resolve => {\n      setTimeout(resolve, delay);\n    }); // Notify the user if they added an `onRetryAttempt` handler\n\n    if (config.onRetryAttempt) {\n      config.onRetryAttempt(err);\n    } // Return the promise in which recalls Gaxios to retry the request\n\n\n    yield backoff;\n    return {\n      shouldRetry: true,\n      config: err.config\n    };\n  });\n}\n\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\n\nfunction shouldRetryRequest(err) {\n  const config = getConfig(err); // If there's no config, or retries are disabled, return.\n\n  if (!config || config.retry === 0) {\n    return false;\n  } // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n\n\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  } // Only retry with configured HttpMethods.\n\n\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  } // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n\n\n  if (err.response && err.response.status) {\n    let isInRange = false;\n\n    for (const [min, max] of config.statusCodesToRetry) {\n      const status = err.response.status;\n\n      if (status >= min && status <= max) {\n        isInRange = true;\n        break;\n      }\n    }\n\n    if (!isInRange) {\n      return false;\n    }\n  } // If we are out of retry attempts, return\n\n\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\n\n\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n\n  return;\n}","map":{"version":3,"mappings":"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","names":["getRetryConfig","err","config","getConfig","retry","shouldRetry","currentRetryAttempt","undefined","retryDelay","httpMethodsToRetry","noResponseRetries","retryRanges","statusCodesToRetry","retryConfig","shouldRetryFn","shouldRetryRequest","delay","Math","pow","backoff","Promise","resolve","setTimeout","onRetryAttempt","exports","response","method","indexOf","toUpperCase","status","isInRange","min","max"],"sources":["../../src/retry.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}