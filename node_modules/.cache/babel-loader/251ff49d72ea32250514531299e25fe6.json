{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst gaxios_1 = require(\"gaxios\");\n\nconst jsonBigint = require('json-bigint');\n\nexports.HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.BASE_URL = exports.HOST_ADDRESS + exports.BASE_PATH;\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n}); // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(`'qs' is not a valid configuration option. Please use 'params' instead.`);\n\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\n\nfunction metadataAccessor(type, options) {\n  let noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  return __awaiter(this, void 0, void 0, function* () {\n    options = options || {};\n\n    if (typeof options === 'string') {\n      options = {\n        property: options\n      };\n    }\n\n    let property = '';\n\n    if (typeof options === 'object' && options.property) {\n      property = '/' + options.property;\n    }\n\n    validate(options);\n\n    try {\n      const res = yield gaxios_1.request({\n        url: `${exports.BASE_URL}/${type}${property}`,\n        headers: Object.assign({}, exports.HEADERS, options.headers),\n        retryConfig: {\n          noResponseRetries\n        },\n        params: options.params,\n        responseType: 'text'\n      }); // NOTE: node.js converts all incoming headers to lower case.\n\n      if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n        throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n      } else if (!res.data) {\n        throw new Error('Invalid response from the metadata service');\n      }\n\n      if (typeof res.data === 'string') {\n        try {\n          return jsonBigint.parse(res.data);\n        } catch (_a) {\n          /* ignore */\n        }\n      }\n\n      return res.data;\n    } catch (e) {\n      if (e.response && e.response.status !== 200) {\n        e.message = `Unsuccessful response status code. ${e.message}`;\n      }\n\n      throw e;\n    }\n  });\n} // tslint:disable-next-line no-any\n\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance; // tslint:disable-next-line no-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return __awaiter(this, void 0, void 0, function* () {\n    try {\n      // Attempt to read instance metadata. As configured, this will\n      // retry 3 times if there is a valid response, and fail fast\n      // if there is an ETIMEDOUT or ENOTFOUND error.\n      yield metadataAccessor('instance', undefined, 0);\n      return true;\n    } catch (err) {\n      // Failure to resolve the metadata service means that it is not available.\n      if (err.code && (err.code === 'ENOTFOUND' || err.code === 'ENOENT')) {\n        return false;\n      } // Throw unexpected errors.\n\n\n      throw err;\n    }\n  });\n}\n\nexports.isAvailable = isAvailable;","map":{"version":3,"mappings":"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","names":["jsonBigint","require","exports","Object","freeze","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","property","res","gaxios_1","url","headers","assign","retryConfig","params","responseType","toLowerCase","data","parse","e","response","status","message","instance","project","isAvailable","undefined","err","code"],"sources":["../../src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}