{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst googleapis_common_1 = require(\"googleapis-common\"); // tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\n\n\nvar remotebuildexecution_v2;\n\n(function (remotebuildexecution_v2) {\n  /**\n   * Remote Build Execution API\n   *\n   * Supplies a Remote Execution API service for tools such as bazel.\n   *\n   * @example\n   * const {google} = require('googleapis');\n   * const remotebuildexecution = google.remotebuildexecution('v2');\n   *\n   * @namespace remotebuildexecution\n   * @type {Function}\n   * @version v2\n   * @variation v2\n   * @param {object=} options Options for Remotebuildexecution\n   */\n  class Remotebuildexecution {\n    constructor(options, google) {\n      this.context = {\n        _options: options || {},\n        google\n      };\n      this.actionResults = new Resource$Actionresults(this.context);\n      this.actions = new Resource$Actions(this.context);\n      this.blobs = new Resource$Blobs(this.context);\n      this.operations = new Resource$Operations(this.context);\n      this.v2 = new Resource$V2(this.context);\n    }\n\n  }\n\n  remotebuildexecution_v2.Remotebuildexecution = Remotebuildexecution;\n\n  class Resource$Actionresults {\n    constructor(context) {\n      this.context = context;\n    }\n\n    get(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    update(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'PUT'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Actionresults = Resource$Actionresults;\n\n  class Resource$Actions {\n    constructor(context) {\n      this.context = context;\n    }\n\n    execute(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/actions:execute').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Actions = Resource$Actions;\n\n  class Resource$Blobs {\n    constructor(context) {\n      this.context = context;\n    }\n\n    batchRead(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:batchRead').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:batchUpdate').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    findMissing(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs:findMissing').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n    getTree(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/blobs/{hash}/{sizeBytes}:getTree').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n        pathParams: ['hash', 'instanceName', 'sizeBytes'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Blobs = Resource$Blobs;\n\n  class Resource$Operations {\n    constructor(context) {\n      this.context = context;\n    }\n\n    waitExecution(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+name}:waitExecution').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'POST'\n        }, options),\n        params,\n        requiredParams: ['name'],\n        pathParams: ['name'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$Operations = Resource$Operations;\n\n  class Resource$V2 {\n    constructor(context) {\n      this.context = context;\n    }\n\n    getCapabilities(paramsOrCallback, optionsOrCallback, callback) {\n      let params = paramsOrCallback || {};\n      let options = optionsOrCallback || {};\n\n      if (typeof paramsOrCallback === 'function') {\n        callback = paramsOrCallback;\n        params = {};\n        options = {};\n      }\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n        options = {};\n      }\n\n      const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n      const parameters = {\n        options: Object.assign({\n          url: (rootUrl + '/v2/{+instanceName}/capabilities').replace(/([^:]\\/)\\/+/g, '$1'),\n          method: 'GET'\n        }, options),\n        params,\n        requiredParams: ['instanceName'],\n        pathParams: ['instanceName'],\n        context: this.context\n      };\n\n      if (callback) {\n        googleapis_common_1.createAPIRequest(parameters, callback);\n      } else {\n        return googleapis_common_1.createAPIRequest(parameters);\n      }\n    }\n\n  }\n\n  remotebuildexecution_v2.Resource$V2 = Resource$V2;\n})(remotebuildexecution_v2 = exports.remotebuildexecution_v2 || (exports.remotebuildexecution_v2 = {}));","map":{"version":3,"sources":["D:/Kurser/Exjobb/Enkät/Release/xai-survey-app/node_modules/googleapis/build/src/apis/remotebuildexecution/v2.js"],"names":["Object","defineProperty","exports","value","googleapis_common_1","require","remotebuildexecution_v2","Remotebuildexecution","constructor","options","google","context","_options","actionResults","Resource$Actionresults","actions","Resource$Actions","blobs","Resource$Blobs","operations","Resource$Operations","v2","Resource$V2","get","paramsOrCallback","optionsOrCallback","callback","params","rootUrl","parameters","assign","url","replace","method","requiredParams","pathParams","createAPIRequest","update","execute","batchRead","batchUpdate","findMissing","getTree","waitExecution","getCapabilities"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst googleapis_common_1 = require(\"googleapis-common\");\n// tslint:disable: no-any\n// tslint:disable: class-name\n// tslint:disable: variable-name\n// tslint:disable: jsdoc-format\n// tslint:disable: no-namespace\nvar remotebuildexecution_v2;\n(function (remotebuildexecution_v2) {\n    /**\n     * Remote Build Execution API\n     *\n     * Supplies a Remote Execution API service for tools such as bazel.\n     *\n     * @example\n     * const {google} = require('googleapis');\n     * const remotebuildexecution = google.remotebuildexecution('v2');\n     *\n     * @namespace remotebuildexecution\n     * @type {Function}\n     * @version v2\n     * @variation v2\n     * @param {object=} options Options for Remotebuildexecution\n     */\n    class Remotebuildexecution {\n        constructor(options, google) {\n            this.context = { _options: options || {}, google };\n            this.actionResults = new Resource$Actionresults(this.context);\n            this.actions = new Resource$Actions(this.context);\n            this.blobs = new Resource$Blobs(this.context);\n            this.operations = new Resource$Operations(this.context);\n            this.v2 = new Resource$V2(this.context);\n        }\n    }\n    remotebuildexecution_v2.Remotebuildexecution = Remotebuildexecution;\n    class Resource$Actionresults {\n        constructor(context) {\n            this.context = context;\n        }\n        get(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n                pathParams: ['hash', 'instanceName', 'sizeBytes'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        update(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/{+instanceName}/actionResults/{hash}/{sizeBytes}')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'PUT'\n                }, options),\n                params,\n                requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n                pathParams: ['hash', 'instanceName', 'sizeBytes'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    remotebuildexecution_v2.Resource$Actionresults = Resource$Actionresults;\n    class Resource$Actions {\n        constructor(context) {\n            this.context = context;\n        }\n        execute(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+instanceName}/actions:execute')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['instanceName'],\n                pathParams: ['instanceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    remotebuildexecution_v2.Resource$Actions = Resource$Actions;\n    class Resource$Blobs {\n        constructor(context) {\n            this.context = context;\n        }\n        batchRead(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+instanceName}/blobs:batchRead')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['instanceName'],\n                pathParams: ['instanceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        batchUpdate(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+instanceName}/blobs:batchUpdate')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['instanceName'],\n                pathParams: ['instanceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        findMissing(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+instanceName}/blobs:findMissing')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['instanceName'],\n                pathParams: ['instanceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n        getTree(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl +\n                        '/v2/{+instanceName}/blobs/{hash}/{sizeBytes}:getTree')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['instanceName', 'hash', 'sizeBytes'],\n                pathParams: ['hash', 'instanceName', 'sizeBytes'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    remotebuildexecution_v2.Resource$Blobs = Resource$Blobs;\n    class Resource$Operations {\n        constructor(context) {\n            this.context = context;\n        }\n        waitExecution(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+name}:waitExecution')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'POST'\n                }, options),\n                params,\n                requiredParams: ['name'],\n                pathParams: ['name'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    remotebuildexecution_v2.Resource$Operations = Resource$Operations;\n    class Resource$V2 {\n        constructor(context) {\n            this.context = context;\n        }\n        getCapabilities(paramsOrCallback, optionsOrCallback, callback) {\n            let params = (paramsOrCallback || {});\n            let options = (optionsOrCallback || {});\n            if (typeof paramsOrCallback === 'function') {\n                callback = paramsOrCallback;\n                params = {};\n                options = {};\n            }\n            if (typeof optionsOrCallback === 'function') {\n                callback = optionsOrCallback;\n                options = {};\n            }\n            const rootUrl = options.rootUrl || 'https://remotebuildexecution.googleapis.com/';\n            const parameters = {\n                options: Object.assign({\n                    url: (rootUrl + '/v2/{+instanceName}/capabilities')\n                        .replace(/([^:]\\/)\\/+/g, '$1'),\n                    method: 'GET'\n                }, options),\n                params,\n                requiredParams: ['instanceName'],\n                pathParams: ['instanceName'],\n                context: this.context\n            };\n            if (callback) {\n                googleapis_common_1.createAPIRequest(parameters, callback);\n            }\n            else {\n                return googleapis_common_1.createAPIRequest(parameters);\n            }\n        }\n    }\n    remotebuildexecution_v2.Resource$V2 = Resource$V2;\n})(remotebuildexecution_v2 = exports.remotebuildexecution_v2 || (exports.remotebuildexecution_v2 = {}));\n//# sourceMappingURL=v2.js.map"]},"metadata":{},"sourceType":"script"}